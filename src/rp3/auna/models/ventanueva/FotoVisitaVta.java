package rp3.auna.models.ventanueva;

import android.database.Cursor;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

import rp3.auna.db.Contract;
import rp3.db.QueryDir;
import rp3.db.sqlite.DataBase;
import rp3.util.CursorUtils;

/**
 * Created by Jesus Villa on 22/09/2017.
 */

public class FotoVisitaVta extends rp3.data.entity.EntityBase<FotoVisitaVta> {
    private long _id;
    private int IdFoto;
    private int IdVisita;
    private String Foto;
    private String Observacion;
    private int Estado;
    private int Insertado;
    /**
     * 0 = Sincronizado
     * 1 = Insertado
     * 2 = Actualizado
     *
     * **/
    public long get_id() {
        return _id;
    }

    public void set_id(long _id) {
        this._id = _id;
    }

    public int getIdFoto() {
        return IdFoto;
    }

    public void setIdFoto(int idFoto) {
        IdFoto = idFoto;
    }

    public int getIdVisita() {
        return IdVisita;
    }

    public void setIdVisita(int idVisita) {
        IdVisita = idVisita;
    }

    public String getFoto() {
        return Foto;
    }

    public void setFoto(String foto) {
        Foto = foto;
    }

    public String getObservacion() {
        return Observacion;
    }

    public void setObservacion(String observacion) {
        Observacion = observacion;
    }

    public int getEstado() {
        return Estado;
    }

    public void setEstado(int estado) {
        Estado = estado;
    }

    public int getInsertado() {
        return Insertado;
    }

    public void setInsertado(int insertado) {
        Insertado = insertado;
    }

    @Override
    public long getID() {
        return this._id;
    }

    @Override
    public void setID(long id) {
        this._id = id;
    }


    @Override
    public boolean isAutoGeneratedId() {
        return true;
    }

    @Override
    public String getTableName() {
        return Contract.FotoVisitaVta.TABLE_NAME;
    }

    @Override
    public void setValues() {
        setValue(Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDVISITA,this.IdVisita);
        setValue(Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDFOTO, this.IdFoto);
        setValue(Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_DESCRIPCION, this.Observacion);
        setValue(Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_FOTO, this.Foto);
        setValue(Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_ESTADO,this.Estado);
        setValue(Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_INSERTADO, this.Insertado);
    }

    @Override
    public Object getValue(String key) {
        return null;
    }

    @Override
    public String getDescription() {
        return null;
    }

    public static ArrayList<FotoVisitaVta> getFotoVisitasInsert(DataBase db) {

        String query = QueryDir.getQuery(Contract.FotoVisitaVta.QUERY_FOTOVISITAVTA_INSERTADAS);

        Cursor c = db.rawQuery(query);
        ArrayList<FotoVisitaVta> list = new ArrayList<>();

        if(c.moveToFirst()){
            do
            {
                FotoVisitaVta llamadaVta =  new FotoVisitaVta();
                llamadaVta.set_id(CursorUtils.getInt(c,Contract.FotoVisitaVta._ID));
                llamadaVta.setIdFoto(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDFOTO));
                llamadaVta.setIdVisita(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDVISITA));
                llamadaVta.setObservacion(CursorUtils.getString(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_DESCRIPCION));
                llamadaVta.setEstado(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_ESTADO));
                llamadaVta.setInsertado(CursorUtils.getInt(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_INSERTADO));
                llamadaVta.setFoto(CursorUtils.getString(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_FOTO));

                list.add(llamadaVta);
            }while(c.moveToNext());
        }
        c.close();
        return list;
    }

    public static ArrayList<FotoVisitaVta> getFotoVisitasSincronizadas(DataBase db) {

        String query = QueryDir.getQuery(Contract.FotoVisitaVta.QUERY_FOTOVISITAVTA_SINCRONIZADAS);

        Cursor c = db.rawQuery(query);
        ArrayList<FotoVisitaVta> list = new ArrayList<>();

        if(c.moveToFirst()){
            do
            {
                FotoVisitaVta llamadaVta =  new FotoVisitaVta();
                llamadaVta.set_id(CursorUtils.getInt(c,Contract.FotoVisitaVta._ID));
                llamadaVta.setIdFoto(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDFOTO));
                llamadaVta.setIdVisita(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDVISITA));
                llamadaVta.setObservacion(CursorUtils.getString(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_DESCRIPCION));
                llamadaVta.setEstado(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_ESTADO));
                llamadaVta.setInsertado(CursorUtils.getInt(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_INSERTADO));
                llamadaVta.setFoto(CursorUtils.getString(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_FOTO));

                list.add(llamadaVta);
            }while(c.moveToNext());
        }
        c.close();
        return list;
    }

    public static ArrayList<FotoVisitaVta> getAll(DataBase db) {

        String query = QueryDir.getQuery(Contract.FotoVisitaVta.QUERY_FOTOVISITAVTA_ALL);

        Cursor c = db.rawQuery(query);
        ArrayList<FotoVisitaVta> list = new ArrayList<>();

        if(c.moveToFirst()){
            do
            {
                FotoVisitaVta llamadaVta =  new FotoVisitaVta();
                llamadaVta.set_id(CursorUtils.getInt(c,Contract.FotoVisitaVta._ID));
                llamadaVta.setIdFoto(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDFOTO));
                llamadaVta.setIdVisita(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDVISITA));
                llamadaVta.setObservacion(CursorUtils.getString(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_DESCRIPCION));
                llamadaVta.setEstado(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_ESTADO));
                llamadaVta.setInsertado(CursorUtils.getInt(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_INSERTADO));
                llamadaVta.setFoto(CursorUtils.getString(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_FOTO));

                list.add(llamadaVta);
            }while(c.moveToNext());
        }
        c.close();
        return list;
    }

    public static ArrayList<FotoVisitaVta> getFotoVisitasSincronizadaVisita(DataBase db,int idVisita) {

        String query = QueryDir.getQuery(Contract.FotoVisitaVta.QUERY_FOTOVISITAVTA_SINCRONIZADAS_VISITA);
        Cursor c = null;
        c = db.rawQuery(query, new String[] {idVisita + ""});
        ArrayList<FotoVisitaVta> list = new ArrayList<>();

        if(c.moveToFirst()){
            do
            {
                FotoVisitaVta llamadaVta =  new FotoVisitaVta();
                llamadaVta.set_id(CursorUtils.getInt(c,Contract.FotoVisitaVta._ID));
                llamadaVta.setIdFoto(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDFOTO));
                llamadaVta.setIdVisita(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDVISITA));
                llamadaVta.setObservacion(CursorUtils.getString(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_DESCRIPCION));
                llamadaVta.setEstado(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_ESTADO));
                llamadaVta.setInsertado(CursorUtils.getInt(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_INSERTADO));
                llamadaVta.setFoto(CursorUtils.getString(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_FOTO));

                list.add(llamadaVta);
            }while(c.moveToNext());
        }
        c.close();
        return list;
    }

    public static ArrayList<FotoVisitaVta> getFotoVisitasSincronizadaVisitaBD(DataBase db,int idVisita) {

        String query = QueryDir.getQuery(Contract.FotoVisitaVta.QUERY_FOTOVISITAVTA_SINCRONIZADAS_VISITA);
        Cursor c=null;
        c = db.rawQuery(query, new String[] {idVisita + ""});
        ArrayList<FotoVisitaVta> list = new ArrayList<>();

        if(c.moveToFirst()){
            do
            {
                FotoVisitaVta llamadaVta =  new FotoVisitaVta();
                llamadaVta.set_id(CursorUtils.getInt(c,Contract.FotoVisitaVta._ID));
                llamadaVta.setIdFoto(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDFOTO));
                llamadaVta.setIdVisita(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_IDVISITA));
                llamadaVta.setObservacion(CursorUtils.getString(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_DESCRIPCION));
                llamadaVta.setEstado(CursorUtils.getInt(c, Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_ESTADO));
                llamadaVta.setInsertado(CursorUtils.getInt(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_INSERTADO));
                llamadaVta.setFoto(CursorUtils.getString(c,Contract.FotoVisitaVta.COLUMN_FOTOVISITAVTA_FOTO));

                list.add(llamadaVta);
            }while(c.moveToNext());
        }
        c.close();
        return list;
    }

    public static void actualizarInsertados(DataBase db) {
        db.execSQL(Contract.FotoVisitaVta.QUERY_FOTOVISITAVTA_UPDATE_TO_INSERTADAS);
    }

    public static void deleteFotoVisita(DataBase db) {
        Log.d("FotoVisitaEntity","deleteFotoVisita...");
        db.execSQL(Contract.FotoVisitaVta.QUERY_DELETE);
    }
}
