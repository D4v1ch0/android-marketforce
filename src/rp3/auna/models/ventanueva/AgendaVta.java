package rp3.auna.models.ventanueva;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

import rp3.auna.Contants;
import rp3.auna.db.Contract;
import rp3.db.QueryDir;
import rp3.db.sqlite.DataBase;
import rp3.util.CursorUtils;

/**
 * Created by Jesus Villa on 22/09/2017.
 */

public class AgendaVta extends rp3.data.entity.EntityBase<AgendaVta>  {
    private long id;
    private int IdAgenda;
    private int OrigenTabla;
    private String OrigenValue;
    private double Latitud;
    private double Longitud;
    private int IdCliente;
    private int IdAgente;
    private int Estado;
    private int Insertado;

    /**
     * 0 = Sincronizado
     * 1 = Insertado
     * 2 = Actualizado
     * **/
    private VisitaVta Visita;
    private LlamadaVta Llamada;

    public VisitaVta getVisita() {
        return Visita;
    }

    public void setVisita(VisitaVta visita) {
        this.Visita = visita;
    }

    public LlamadaVta getLlamada() {
        return Llamada;
    }

    public void setLlamada(LlamadaVta llamada) {
        this.Llamada = llamada;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public int getIdAgenda() {
        return IdAgenda;
    }

    public void setIdAgenda(int idAgenda) {
        IdAgenda = idAgenda;
    }

    public int getOrigenTabla() {
        return OrigenTabla;
    }

    public void setOrigenTabla(int origenTabla) {
        OrigenTabla = origenTabla;
    }

    public String getOrigenValue() {
        return OrigenValue;
    }

    public int getIdCliente() {
        return IdCliente;
    }

    public void setIdCliente(int idCliente) {
        IdCliente = idCliente;
    }

    public int getIdAgente() {
        return IdAgente;
    }

    public void setIdAgente(int idAgente) {
        IdAgente = idAgente;
    }

    public void setOrigenValue(String origenValue) {
        OrigenValue = origenValue;
    }

    public double getLatitud() {
        return Latitud;
    }

    public void setLatitud(double latitud) {
        Latitud = latitud;
    }

    public double getLongitud() {
        return Longitud;
    }

    public void setLongitud(double longitud) {
        Longitud = longitud;
    }

    public int getEstado() {
        return Estado;
    }

    public void setEstado(int estado) {
        Estado = estado;
    }

    public int getInsertado() {
        return Insertado;
    }

    public void setInsertado(int insertado) {
        Insertado = insertado;
    }


    @Override
    public long getID() {
        return id;
    }

    @Override
    public void setID(long id) {
        this.id = id;
    }

    @Override
    public boolean isAutoGeneratedId() {
        return true;
    }

    @Override
    public String getTableName() {
        return Contract.AgendaVta.TABLE_NAME;
    }

    @Override
    public void setValues() {
        setValue(Contract.AgendaVta.COLUMN_AGENDAVTA_IDAGENDA,this.IdAgenda);
        setValue(Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_TABLA, this.OrigenTabla);
        setValue(Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_VALUE, this.OrigenValue);
        setValue(Contract.AgendaVta.COLUMN_AGENDAVTA_LATITUD, this.Latitud);
        setValue(Contract.AgendaVta.COLUMN_AGENDAVTA_LONGITUD, this.Longitud);
        setValue(Contract.AgendaVta.COLUMN_AGENDAVTA_ID_CLIENTE,this.IdCliente);
        setValue(Contract.AgendaVta.COLUMN_AGENDAVTA_ID_AGENTE,this.IdAgente);
        setValue(Contract.VisitaVta.COLUMN_VISITAVTA_ESTADO,this.Estado);
        setValue(Contract.VisitaVta.COLUMN_VISITAVTA_INSERTADO, this.Insertado);
    }

    @Override
    public Object getValue(String key) {
        return null;
    }

    @Override
    public String getDescription() {
        return null;
    }

    public static int getMaxIdAgendaVta(DataBase db){
        String query = Contract.AgendaVta.QUERY_GET_MAX_ID;
        int id = -1;
        try{

            Cursor cursor=db.rawQuery(query,new String [] {});
            if (cursor != null)
                if(cursor.moveToFirst())
                {
                    id = cursor.getInt(0);

                }
            //  cursor.close();

            return id ;
        }
        catch(Exception e){
            Log.d("Agenda models","Exception:"+ e.getMessage());
            return -1;
        }
    }

    public static List<AgendaVta> getAgendasInsert(DataBase db) {
        List<AgendaVta> agendas = new ArrayList<>();
        List<VisitaVta> visitas = new ArrayList<>();
        List<LlamadaVta> llamadas = new ArrayList<>();
        ArrayList<FotoVisitaVta> fotos = new ArrayList<>();
        String query = QueryDir.getQuery(Contract.AgendaVta.QUERY_AGENDAVTA_INSERTADAS);
        Cursor c = db.rawQuery(query);
        if(c.moveToFirst()){
            do
            {
                AgendaVta llamadaVta =  new AgendaVta();
                llamadaVta.setId(CursorUtils.getInt(c,Contract.AgendaVta._ID));
                llamadaVta.setIdAgenda(CursorUtils.getInt(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ID));
                llamadaVta.setIdCliente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_CLIENTE));
                llamadaVta.setIdAgente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_AGENTE));
                llamadaVta.setOrigenValue(CursorUtils.getString(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_VALUE));
                llamadaVta.setLatitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LATITUD));
                llamadaVta.setLongitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LONGITUD));
                llamadaVta.setOrigenTabla(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_TABLA));
                llamadaVta.setEstado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ESTADO));
                llamadaVta.setInsertado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_INSERTADO));
                agendas.add(llamadaVta);
            }while(c.moveToNext());
        }
        c.close();
        llamadas.addAll(LlamadaVta.getLlamadasInsert(db));
        visitas.addAll(VisitaVta.getVisitasInsert(db));
        fotos.addAll(FotoVisitaVta.getFotoVisitasInsert(db));
        Log.d("AgendaVTA","Cantidad de llamadasInsert:"+llamadas.size());
        Log.d("AgendaVTA","Cantidad de visitasInsert:"+visitas.size());
        Log.d("AgendaVTA","Cantidad de agendasInsert:"+agendas.size());
        Log.d("AgendaVTA","Cantidad de fotosInsert:"+fotos.size());
        List<AgendaVta> list= new ArrayList<>();
        if(fotos.size()>0 && visitas.size()>0){
            Log.d("AgendaVTA","Si hay visitasInsert con fotos...");
            for(VisitaVta visita:visitas){
                ArrayList<FotoVisitaVta> temp = new ArrayList<>();
                if(visita.getInsertado() == 1 ){
                    temp = FotoVisitaVta.getFotoVisitasSincronizadaVisitaBD(db,(int)visita.getID());
                }
                visita.setFotos(temp);
            }
        }

        int countLlamada = 0;
        int countVisita = 0;

        if(agendas.size()>0){
            //Log.d("AgendaVTA","Agendas.size>0...");
            for (AgendaVta agenda:agendas) {
                if(llamadas.size()>0){
                    Log.d("AgendaVta","Si hay llamadas..."+llamadas.size());
                    if(agenda.getInsertado() == 1){
                        Log.d("AgendaVTA","Temporal en BD");
                        LlamadaVta llamadaVta = LlamadaVta.getLlamadasFromAgendaBD(db,(int)agenda.getID());
                        if(llamadaVta!=null){agenda.setLlamada(llamadaVta);countLlamada++;}
                    }
                }
                if(visitas.size()>0){
                    Log.d("AgendaVta","Si hay visitas..."+visitas.size());
                    //Log.d("AgendaVTA",visita.toString());
                    if(agenda.getInsertado()==1){
                        Log.d("AgendaVTA","Temporal en BD");
                        VisitaVta visitaVta = VisitaVta.getVisitasfromAgendaBD(db,(int)agenda.getID());
                        if(visitaVta!=null){agenda.setVisita(visitaVta);countVisita++;}
                    }
                }
                list.add(agenda);
            }
        }

        Log.d("AgendaVta","Total de agendasInsert:"+list.size());
        Log.d("AgendaVta","Agendas:Cantidad en llamadas:"+countLlamada+" visitas:"+countVisita);
        return list;
    }

    public static List<AgendaVta> getAll(DataBase db) {
        List<AgendaVta> agendas = new ArrayList<>();
        List<VisitaVta> visitas = new ArrayList<>();
        List<LlamadaVta> llamadas = new ArrayList<>();
        ArrayList<FotoVisitaVta> fotos = new ArrayList<>();
        String query = QueryDir.getQuery(Contract.AgendaVta.QUERY_AGENDAVTA_ALL);
        Cursor c = db.rawQuery(query);
        if(c.moveToFirst()){
            do
            {
                AgendaVta llamadaVta =  new AgendaVta();
                llamadaVta.setId(CursorUtils.getInt(c,Contract.AgendaVta._ID));
                llamadaVta.setIdAgenda(CursorUtils.getInt(c, Contract.AgendaVta.COLUMN_AGENDAVTA_IDAGENDA));
                llamadaVta.setIdCliente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_CLIENTE));
                llamadaVta.setIdAgente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_AGENTE));
                llamadaVta.setOrigenValue(CursorUtils.getString(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_VALUE));
                llamadaVta.setLatitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LATITUD));
                llamadaVta.setLongitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LONGITUD));
                llamadaVta.setOrigenTabla(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_TABLA));
                llamadaVta.setInsertado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_INSERTADO));
                llamadaVta.setEstado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ESTADO));
                agendas.add(llamadaVta);
            }while(c.moveToNext());
        }
        c.close();
        llamadas.addAll(LlamadaVta.getLlamadasAll(db));
        visitas.addAll(VisitaVta.getAll(db));
        fotos.addAll(FotoVisitaVta.getAll(db));
        Log.d("AgendaVTA","Cantidad de llamadas:"+llamadas.size());
        Log.d("AgendaVTA","Cantidad de visitas:"+visitas.size());
        Log.d("AgendaVTA","Cantidad de agendas:"+agendas.size());
        Log.d("AgendaVTA","Cantidad de fotos:"+fotos.size());
        List<AgendaVta> list= new ArrayList<>();
        if(fotos.size()>0 && visitas.size()>0){
            Log.d("AgendaVTA","Si hay visitas con fotos...");
            for(VisitaVta visita:visitas){
                ArrayList<FotoVisitaVta> temp = new ArrayList<>();
                    if(visita.getInsertado() == 1 ){
                        temp = FotoVisitaVta.getFotoVisitasSincronizadaVisitaBD(db,(int)visita.getID());
                    }else{
                        temp = FotoVisitaVta.getFotoVisitasSincronizadaVisita(db,visita.getIdVisita());
                    }
                visita.setFotos(temp);
            }
        }

        int countLlamada = 0;
        int countVisita = 0;

        if(agendas.size()>0){
            //Log.d("AgendaVTA","Agendas.size>0...");
            for (AgendaVta agenda:agendas) {
                if(llamadas.size()>0){
                    Log.d("AgendaVta","Si hay llamadas..."+llamadas.size());
                        if(agenda.getInsertado() == 1){
                            Log.d("AgendaVTA","Temporal en BD");
                            LlamadaVta llamadaVta = LlamadaVta.getLlamadasFromAgendaBD(db,(int)agenda.getID());
                            if(llamadaVta!=null){agenda.setLlamada(llamadaVta);}
                        }else{
                            Log.d("AgendaVTA","Ya esta en BD...");
                            LlamadaVta llamadaVta = LlamadaVta.getLlamadasFromAgenda(db,agenda.getIdAgenda());
                            if(llamadaVta!=null){agenda.setLlamada(llamadaVta);}
                        }
                }
                if(visitas.size()>0){
                    Log.d("AgendaVta","Si hay visitas..."+visitas.size());
                        //Log.d("AgendaVTA",visita.toString());
                        if(agenda.getInsertado()==1){
                            Log.d("AgendaVTA","Temporal en BD");
                            VisitaVta visitaVta = VisitaVta.getVisitasfromAgendaBD(db,(int)agenda.getID());
                            if(visitaVta!=null){agenda.setVisita(visitaVta);}
                        }else{
                            Log.d("AgendaVta","Ya esta en BD...");
                            VisitaVta visitaVta = VisitaVta.getVisitasfromAgenda(db,agenda.getIdAgenda());
                            if(visitaVta!=null){agenda.setVisita(visitaVta);}
                        }
                }
                list.add(agenda);
            }
        }

        Log.d("AgendaVta","Total de agendas:"+list.size());
        Log.d("AgendaVta","Cantidad llamadas en agenda:"+countLlamada+" visitas:"+countVisita);
        return list;
    }

    public static AgendaVta getAgenda(DataBase db,int i){
        AgendaVta agendaVta=null;
        String query = QueryDir.getQuery(Contract.AgendaVta.QUERY_AGENDAVTA_SINCRONIZADAIDAGENDA);
        Cursor c = null;
        c = db.rawQuery(query, new String[] {i + ""});
        if(c.moveToFirst()){
            do
            {
                if(CursorUtils.getInt(c, Contract.AgendaVta.COLUMN_AGENDAVTA_IDAGENDA) == i){
                    Log.d("AgndaVta","Agenda encontrada con el id"+i);
                    agendaVta =  new AgendaVta();
                    agendaVta.setId(CursorUtils.getInt(c,Contract.AgendaVta._ID));
                    agendaVta.setIdAgenda(CursorUtils.getInt(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ID));
                    agendaVta.setIdCliente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_CLIENTE));
                    agendaVta.setIdAgente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_AGENTE));
                    agendaVta.setOrigenValue(CursorUtils.getString(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_VALUE));
                    agendaVta.setLatitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LATITUD));
                    agendaVta.setLongitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LONGITUD));
                    agendaVta.setOrigenTabla(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_TABLA));
                    agendaVta.setEstado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ESTADO));
                    agendaVta.setInsertado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_INSERTADO));
                    break;
                }

            }while(c.moveToNext());
        }
        c.close();
            if(agendaVta!=null){
                Log.d("AgndaVta","agendas!=null..");
                LlamadaVta llamadaVta = LlamadaVta.getLlamadasFromAgenda(db,agendaVta.getIdAgenda());
                if(llamadaVta!=null){agendaVta.setLlamada(llamadaVta);}
                VisitaVta visitaVta = VisitaVta.getVisitasfromAgenda(db,agendaVta.getIdAgenda());
                if(visitaVta!=null){
                    ArrayList<FotoVisitaVta> fotoVisitaVtas = FotoVisitaVta.getFotoVisitasSincronizadaVisita(db,visitaVta.getIdVisita());
                    if(fotoVisitaVtas!=null){
                        if(fotoVisitaVtas.size()>0){
                            visitaVta.setFotos(fotoVisitaVtas);
                        }
                    }
                    agendaVta.setVisita(visitaVta);
                }
                return agendaVta;
            }
        return null;
    }

    public static AgendaVta getAgendaBD(DataBase db,int i){
        AgendaVta agendaVta=null;
        String query = QueryDir.getQuery(Contract.AgendaVta.QUERY_AGENDAVTA_SINCRONIZADAIDAGENDABD);
        Cursor c = null;
        c = db.rawQuery(query, new String[] {i + ""});
        if(c.moveToFirst()){
            do
            {
                if(CursorUtils.getInt(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ID) == i){
                    Log.d("AgndaVta","Agenda encontrada con el id"+i);
                    agendaVta =  new AgendaVta();
                    agendaVta.setId(CursorUtils.getInt(c,Contract.AgendaVta._ID));
                    agendaVta.setIdAgenda(CursorUtils.getInt(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ID));
                    agendaVta.setIdCliente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_CLIENTE));
                    agendaVta.setIdAgente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_AGENTE));
                    agendaVta.setOrigenValue(CursorUtils.getString(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_VALUE));
                    agendaVta.setLatitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LATITUD));
                    agendaVta.setLongitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LONGITUD));
                    agendaVta.setOrigenTabla(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_TABLA));
                    agendaVta.setEstado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ESTADO));
                    agendaVta.setInsertado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_INSERTADO));
                    break;
                }

            }while(c.moveToNext());
        }
        c.close();
        if(agendaVta!=null){
            Log.d("AgndaVta","agendas!=null..");
            LlamadaVta llamadaVta = LlamadaVta.getLlamadasFromAgendaBD(db,(int)agendaVta.getID());
            if(llamadaVta!=null){agendaVta.setLlamada(llamadaVta);}
            VisitaVta visitaVta = VisitaVta.getVisitasfromAgendaBD(db,(int)agendaVta.getID());
            if(visitaVta!=null){
                ArrayList<FotoVisitaVta> fotoVisitaVtas = FotoVisitaVta.getFotoVisitasSincronizadaVisitaBD(db,(int)visitaVta.getID());
                if(fotoVisitaVtas!=null){
                    if(fotoVisitaVtas.size()>0){
                        visitaVta.setFotos(fotoVisitaVtas);
                    }
                }
                agendaVta.setVisita(visitaVta);
            }
            return agendaVta;
        }
        return null;
    }

    public static AgendaVta getAgendaBDByProspectoBD(DataBase db,int i){
        AgendaVta agendaVta=null;
        String query = QueryDir.getQuery(Contract.AgendaVta.QUERY_AGENDAVTA_SINCRONIZADAIDAGENDABDPROSPECTOBD);
        Cursor c = null;
        c = db.rawQuery(query, new String[] {i + ""});
        if(c.moveToFirst()){
            do
            {
                if(CursorUtils.getInt(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ID) == i){
                    Log.d("AgndaVta","Agenda encontrada con el id de prospectoBD"+i);
                    agendaVta =  new AgendaVta();
                    agendaVta.setId(CursorUtils.getInt(c,Contract.AgendaVta._ID));
                    agendaVta.setIdAgenda(CursorUtils.getInt(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ID));
                    agendaVta.setIdCliente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_CLIENTE));
                    agendaVta.setIdAgente(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ID_AGENTE));
                    agendaVta.setOrigenValue(CursorUtils.getString(c, Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_VALUE));
                    agendaVta.setLatitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LATITUD));
                    agendaVta.setLongitud(CursorUtils.getFloat(c, Contract.AgendaVta.COLUMN_AGENDAVTA_LONGITUD));
                    agendaVta.setOrigenTabla(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ORIGEN_TABLA));
                    agendaVta.setEstado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_ESTADO));
                    agendaVta.setInsertado(CursorUtils.getInt(c,Contract.AgendaVta.COLUMN_AGENDAVTA_INSERTADO));
                    break;
                }

            }while(c.moveToNext());
        }
        c.close();
        if(agendaVta!=null){
            Log.d("AgndaVta","agendas!=null..");
            LlamadaVta llamadaVta = LlamadaVta.getLlamadasFromAgendaBD(db,(int)agendaVta.getID());
            if(llamadaVta!=null){agendaVta.setLlamada(llamadaVta);}
            VisitaVta visitaVta = VisitaVta.getVisitasfromAgendaBD(db,(int)agendaVta.getID());
            if(visitaVta!=null){
                ArrayList<FotoVisitaVta> fotoVisitaVtas = FotoVisitaVta.getFotoVisitasSincronizadaVisitaBD(db,(int)visitaVta.getID());
                if(fotoVisitaVtas!=null){
                    if(fotoVisitaVtas.size()>0){
                        visitaVta.setFotos(fotoVisitaVtas);
                    }
                }
                agendaVta.setVisita(visitaVta);
            }
            return agendaVta;
        }
        return null;
    }

    public static void ActualizarInsertados(DataBase db) {
        db.execSQL(Contract.AgendaVta.QUERY_AGENDAVTA_UPDATE_TO_INSERTADAS);
    }
    public static void deleteAgendas(DataBase db)
    {
        Log.d("AgendaEntity","deleteAgendas...");
        db.execSQL(Contract.AgendaVta.QUERY_DELETE);
    }

    @Override
    public String toString() {
        return "AgendaVta{" +
                "id=" + id +
                ", IdAgenda=" + IdAgenda +
                ", OrigenTabla=" + OrigenTabla +
                ", OrigenValue='" + OrigenValue + '\'' +
                ", Latitud=" + Latitud +
                ", Longitud=" + Longitud +
                ", IdCliente=" + IdCliente +
                ", IdAgente=" + IdAgente +
                ", Estado=" + Estado +
                ", Insertado=" + Insertado +
                ", Visita=" + Visita +
                ", Llamada=" + Llamada +
                '}';
    }
}
