package rp3.berlin.models;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import rp3.data.entity.EntityBase;
import rp3.db.QueryDir;
import rp3.db.sqlite.DataBase;
import rp3.berlin.Contants;
import rp3.berlin.db.Contract;
import rp3.berlin.models.pedido.Pedido;
import rp3.util.Convert;
import rp3.util.CursorUtils;
import android.database.Cursor;
import android.util.Log;

public class Agenda extends rp3.data.entity.EntityBase<Agenda>{

	private long id;
	private int idRuta;
	private int idAgenda;
	private int idCliente;
	private long _idCliente;
	private int idClienteDireccion;
	private long _idClienteDireccion;
	private int idProgramacionRuta;
	private int idContacto;
	private long _idContacto;
	private Date fechaInicio;
	private Date fechaFin;
	private Date fechaInicioReal;
	private Date fechaFinReal;
	private boolean enviado;
	private String estadoAgenda;
	private ClienteDireccion clienteDireccion;
	private List<AgendaTarea> agendaTareas;
	private Pedido pedido;
	private String nombreCompleto;
	private String ciudad;
	private String direccion;
	private String observaciones;
	private String estadoAgendaDescripcion;
	private Cliente Cliente;
	private Contacto contacto;
	private String Foto1Ext;
	private String Foto2Ext;
	private String Foto3Ext;
	private String Foto1Int;
	private String Foto2Int;
	private String Foto3Int;
	private String idMotivoNoVisita;
	private double latitud;
	private double longitud;
	private long duracion;
	private long distancia;
	private long TiempoViaje;
	private String idMotivoReprogramacion;
	private Date fechaCreacion;
	private String tipoAgenda;
	private double valorVenta;

	public Pedido getPedido() {
		return pedido;
	}

	public void setPedido(Pedido pedido) {
		this.pedido = pedido;
	}

	public double getValorVenta() {
		return valorVenta;
	}

	public void setValorVenta(double valorVenta) {
		this.valorVenta = valorVenta;
	}

	public String getIdMotivoReprogramacion() {
		return idMotivoReprogramacion;
	}

	public void setIdMotivoReprogramacion(String idMotivoReprogramacion) {
		this.idMotivoReprogramacion = idMotivoReprogramacion;
	}

	public Date getFechaCreacion() {
		return fechaCreacion;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}

	public long getTiempoViaje() {
		return TiempoViaje;
	}

	public void setTiempoViaje(long tiempoViaje) {
		TiempoViaje = tiempoViaje;
	}

	public String getTipoAgenda() {
		return tipoAgenda;
	}

	public void setTipoAgenda(String tipoAgenda) {
		this.tipoAgenda = tipoAgenda;
	}

	public long getDuracion() {
		return duracion;
	}

	public void setDuracion(long duracion) {
		this.duracion = duracion;
	}

	public long getDistancia() {
		return distancia;
	}

	public void setDistancia(long distancia) {
		this.distancia = distancia;
	}



	@Override
	public long getID() {
		return id;
	}

	@Override
	public void setID(long id) {
		this.id = id;
	}

	@Override
	public boolean isAutoGeneratedId() {
		return true;
	}

	@Override
	public String getTableName() {
		return Contract.Agenda.TABLE_NAME;
	}

	@Override
	public void setValues() {

		setValue(Contract.Agenda.COLUMN_RUTA_ID, this.idRuta);
		setValue(Contract.Agenda.COLUMN_AGENDA_ID, this.idAgenda);
		setValue(Contract.Agenda.COLUMN_CLIENTE_ID, this.idCliente);
		setValue(Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID, this.idClienteDireccion);
		setValue(Contract.Agenda.COLUMN_PROGRAMACION_RUTA_ID, this.idProgramacionRuta);
		setValue(Contract.Agenda.COLUMN_FECHA_INICIO ,this.fechaInicio);
		setValue(Contract.Agenda.COLUMN_FECHA_FIN, this.fechaFin);
		setValue(Contract.Agenda.COLUMN_ESTADO_AGENDA, this.estadoAgenda);
		setValue(Contract.Agenda.COLUMN_FECHA_INICIO_REAL, this.fechaInicioReal);
		setValue(Contract.Agenda.COLUMN_FECHA_FIN_REAL, this.fechaFinReal);
		setValue(Contract.Agenda.COLUMN_ENVIADO, this.enviado);
		setValue(Contract.Agenda.COLUMN_CONTACTO_ID, this.idContacto);
		setValue(Contract.Agenda.COLUMN_OBSERVACIONES, this.observaciones);
		setValue(Contract.Agenda.COLUMN_FOTO1_EXT, this.Foto1Ext);
		setValue(Contract.Agenda.COLUMN_FOTO2_EXT, this.Foto2Ext);
		setValue(Contract.Agenda.COLUMN_FOTO3_EXT, this.Foto3Ext);
		setValue(Contract.Agenda.COLUMN_FOTO1_INT, this.Foto1Int);
		setValue(Contract.Agenda.COLUMN_FOTO2_INT, this.Foto2Int);
		setValue(Contract.Agenda.COLUMN_FOTO3_INT, this.Foto3Int);
		setValue(Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID, this.idMotivoNoVisita);
		setValue(Contract.Agenda.COLUMN_LATITUD, this.latitud);
		setValue(Contract.Agenda.COLUMN_LONGITUD, this.longitud);
		setValue(Contract.Agenda.COLUMN_CLIENTE_ID_EXT, this._idCliente);
		setValue(Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID_EXT, this._idClienteDireccion);
		setValue(Contract.Agenda.COLUMN_CONTACTO_ID_EXT, this._idContacto);
		setValue(Contract.Agenda.COLUMN_DURACION, this.duracion);
		setValue(Contract.Agenda.COLUMN_DISTANCIA, this.distancia);
		setValue(Contract.Agenda.COLUMN_TIEMPO_VIAJE, this.TiempoViaje);
		setValue(Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION, this.idMotivoReprogramacion);
		setValue(Contract.Agenda.COLUMN_FECHA_CREACION, this.fechaCreacion);
		setValue(Contract.Agenda.COLUMN_VALOR_VENTA, this.valorVenta);
	}

	@Override
	public Object getValue(String key) {
		return null;
	}

	@Override
	public String getDescription() {
		return null;
	}

	public int getIdRuta() {
		return idRuta;
	}

	public void setIdRuta(int idRuta) {
		this.idRuta = idRuta;
	}

	public int getIdAgenda() {
		return idAgenda;
	}

	public void setIdAgenda(int idAgenda) {
		this.idAgenda = idAgenda;
	}

	public int getIdCliente() {
		return idCliente;
	}

	public void setIdCliente(int idCliente) {
		this.idCliente = idCliente;
	}

	public int getIdClienteDireccion() {
		return idClienteDireccion;
	}

	public void setIdClienteDireccion(int idClienteDireccion) {
		this.idClienteDireccion = idClienteDireccion;
	}

	public int getIdProgramacionRuta() {
		return idProgramacionRuta;
	}

	public void setIdProgramacionRuta(int idProgramacionRuta) {
		this.idProgramacionRuta = idProgramacionRuta;
	}

	public Date getFechaInicio() {
		return fechaInicio;
	}

	public void setFechaInicio(Date fechaInicio) {
		this.fechaInicio = fechaInicio;
	}

	public Date getFechaFin() {
		return fechaFin;
	}

	public void setFechaFin(Date fechaFin) {
		this.fechaFin = fechaFin;
	}

	public boolean isEnviado() {
		return enviado;
	}

	public void setEnviado(boolean enviado) {
		this.enviado = enviado;
	}

	public String getEstadoAgenda() {
		return estadoAgenda;
	}

	public void setEstadoAgenda(String estadoAgenda) {
		this.estadoAgenda = estadoAgenda;
	}

	public ClienteDireccion getClienteDireccion() {
		return clienteDireccion;
	}

	public void setClienteDireccion(ClienteDireccion clienteDireccion) {
		this.clienteDireccion = clienteDireccion;
	}

	public List<AgendaTarea> getAgendaTareas() {
		if(agendaTareas==null)
			agendaTareas = new ArrayList<AgendaTarea>();
		return agendaTareas;
	}

	public void setAgendaTareaList(List<AgendaTarea> agendaTareaList) {
		agendaTareas = agendaTareaList;
	}

	public String getNombreCompleto() {
		return nombreCompleto;
	}

	public void setNombreCompleto(String nombreCompleto) {
		this.nombreCompleto = nombreCompleto;
	}

	public String getCiudad() {
		return ciudad;
	}

	public void setCiudad(String ciudad) {
		this.ciudad = ciudad;
	}

	public String getDireccion() {
		return direccion;
	}

	public void setDireccion(String direccion) {
		this.direccion = direccion;
	}

	public String getEstadoAgendaDescripcion() {
		return estadoAgendaDescripcion;
	}

	public void setEstadoAgendaDescripcion(String estadoAgendaDescripcion) {
		this.estadoAgendaDescripcion = estadoAgendaDescripcion;
	}

	public Cliente getCliente() {
		return Cliente;
	}

	public void setCliente(Cliente cliente) {
		Cliente = cliente;
	}

	public int getIdContacto() {
		return idContacto;
	}

	public void setIdContacto(int idContacto) {
		this.idContacto = idContacto;
	}

	public String getObservaciones() {
		return observaciones;
	}

	public void setObservaciones(String observaciones) {
		this.observaciones = observaciones;
	}

	public String getFoto1Ext() {
		return Foto1Ext;
	}

	public void setFoto1Ext(String foto1Ext) {
		Foto1Ext = foto1Ext;
	}

	public String getFoto2Ext() {
		return Foto2Ext;
	}

	public void setFoto2Ext(String foto2Ext) {
		Foto2Ext = foto2Ext;
	}

	public String getFoto3Ext() {
		return Foto3Ext;
	}

	public void setFoto3Ext(String foto3Ext) {
		Foto3Ext = foto3Ext;
	}

	public String getFoto1Int() {
		return Foto1Int;
	}

	public void setFoto1Int(String foto1Int) {
		Foto1Int = foto1Int;
	}

	public String getFoto2Int() {
		return Foto2Int;
	}

	public void setFoto2Int(String foto2Int) {
		Foto2Int = foto2Int;
	}

	public String getFoto3Int() {
		return Foto3Int;
	}

	public void setFoto3Int(String foto3Int) {
		Foto3Int = foto3Int;
	}

	public Date getFechaInicioReal() {
		return fechaInicioReal;
	}

	public void setFechaInicioReal(Date fechaInicioReal) {
		this.fechaInicioReal = fechaInicioReal;
	}

	public Date getFechaFinReal() {
		return fechaFinReal;
	}

	public void setFechaFinReal(Date fechaFinReal) {
		this.fechaFinReal = fechaFinReal;
	}

	public Contacto getContacto() {
		return contacto;
	}

	public void setContacto(Contacto contacto) {
		this.contacto = contacto;
	}

	public double getLatitud() {
		return latitud;
	}

	public void setLatitud(double latitud) {
		this.latitud = latitud;
	}

	public String getIdMotivoNoVisita() {
		return idMotivoNoVisita;
	}

	public void setIdMotivoNoVisita(String idMotivoNoVisita) {
		this.idMotivoNoVisita = idMotivoNoVisita;
	}

	public double getLongitud() {
		return longitud;
	}

	public void setLongitud(double longitud) {
		this.longitud = longitud;
	}

	public long get_idClienteDireccion() {
		return _idClienteDireccion;
	}

	public void set_idClienteDireccion(long _idClienteDireccion) {
		this._idClienteDireccion = _idClienteDireccion;
	}

	public long get_idContacto() {
		return _idContacto;
	}

	public void set_idContacto(long _idContacto) {
		this._idContacto = _idContacto;
	}

	public long get_idCliente() {
		return _idCliente;
	}

	public void set_idCliente(long _idCliente) {
		this._idCliente = _idCliente;
	}

	public static List<Agenda> getAgenda(DataBase db){
		String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA );

		Cursor c = db.rawQuery(query);

		List<Agenda> list = new ArrayList<Agenda>();
		while(c.moveToNext()){

			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.set_idCliente(CursorUtils.getLong(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setIdMotivoNoVisita(CursorUtils.getString(c, Contract.Agenda.FIELD_MOTIVO_NO_VISITA_ID));
			agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
			agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
			agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
			agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
			agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
			agd.setEnviado(CursorUtils.getBoolean(c, Contract.Agenda.COLUMN_ENVIADO));
			agd.setTipoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_TIPO_AGENDA));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));

			if(agd.getTipoAgenda().equalsIgnoreCase(Contants.TIPO_AGENDA_CLIENTE)) {
				ClienteDireccion cld = new ClienteDireccion();
				cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
				agd.setCiudad(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CIUDAD));
				agd.setClienteDireccion(cld);

				agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.FIELD_CONTACTO_ID));
				agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
				agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));
				agd.setContacto(Contacto.getContactoId(db, agd.getIdContacto(), agd.getIdCliente()));
			}

			if(agd.getIdAgenda() == 0)
				agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getID(), agd.getIdRuta(), true));
			else
				agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

			list.add(agd);
		}
		c.close();
		return list;
	}

	public static List<Agenda> getAgendaSemanal(DataBase db){

		String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA_SEMANAL);
		Calendar cal = Calendar.getInstance();
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);

		Cursor c = db.rawQuery(query, new String[] {Convert.getTicksFromDate(cal.getTime()) + "" , Convert.getTicksFromDate(cal.getTime()) + "" });

		List<Agenda> list = new ArrayList<Agenda>();
		while (c.moveToNext()){

			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.set_idCliente(CursorUtils.getLong(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.set_idClienteDireccion(CursorUtils.getLong(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.set_idContacto(CursorUtils.getLong(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
			agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
			agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
			agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
			agd.setEnviado(CursorUtils.getBoolean(c, Contract.Agenda.COLUMN_ENVIADO));
			agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
			agd.setTipoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_TIPO_AGENDA));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));
			agd.setValorVenta(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_VALOR_VENTA));
			if(agd.getIdAgenda() == 0)
				agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getID(), agd.getIdRuta(), true));
			else
				agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setCiudad(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CIUDAD));
			agd.setClienteDireccion(cld);

			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.FIELD_CONTACTO_ID));
			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
			if(agd.getTipoAgenda().equalsIgnoreCase(Contants.TIPO_AGENDA_CLIENTE)) {
				if (agd.getIdCliente() == 0)
					agd.setCliente(rp3.berlin.models.Cliente.getClienteID(db, agd.get_idCliente(), false));
				else
					agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));
				agd.setContacto(Contacto.getContactoId(db, agd.getIdContacto(), agd.getIdCliente()));
			}

			list.add(agd);
		}
		c.close();
		return list;
	}

	public static Agenda getAgenda(DataBase db, long id) {

		String query = QueryDir.getQuery(Contract.Agenda.QUERY_AGENDA_ID );
		Cursor c = db.rawQuery(query, "" + id);

		Agenda agd = null;
		while (c.moveToNext()){

			agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.set_idCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID_EXT));
			agd.set_idClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID_EXT));
			agd.set_idContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID_EXT));

			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
			agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setFechaInicioReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INICIO_REAL)));
			agd.setFechaFinReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN_REAL)));
			agd.setFoto1Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO1_EXT));
			agd.setFoto2Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO2_EXT));
			agd.setFoto3Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO3_EXT));
			agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO1_INT));
			agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO2_INT));
			agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO3_INT));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.FIELD_OBSERVACIONES));
			agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
			agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
			agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
			agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
			agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
			agd.setLatitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LATITUD));
			agd.setLongitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LONGITUD));
			agd.setValorVenta(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_VALOR_VENTA));

			Cliente cl = new Cliente();
			cl.setNombreCompleto(agd.getNombreCompleto());
			cl.setCorreoElectronico(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CORREO_ELECTRONICO));
			cl.setURLFoto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_URL_FOTO));
			cl.setIdCliente(agd.getIdCliente());
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.FIELD_CONTACTO_ID));
			agd.setContacto(Contacto.getContactoId(db, agd.getIdContacto(), agd.getIdCliente()));

			agd.setCliente(cl);

			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_TELEFONO)));
			agd.setClienteDireccion(cld);
			if(agd.getIdCliente() == 0)
				agd.setCliente(rp3.berlin.models.Cliente.getClienteID(db, agd.get_idCliente(), false));
			else
				agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));

			if(agd.getIdCliente() == 0)
				agd.setClienteDireccion(ClienteDireccion.getClienteDireccionIdDireccionIntern(db, agd.get_idCliente(), agd.getIdClienteDireccion()));
			else
				agd.setClienteDireccion(ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));

			if(agd.getIdAgenda() == 0)
				agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getID(), agd.getIdRuta(), true));
			else
				agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

			//agd.setPedido(Pedido.getPedidoByAgenda(db, agd.getID()));

		}
		c.close();
		return agd;
	}

	public static Agenda getAgendaClienteNull(DataBase db, long id) {

		String query = QueryDir.getQuery(Contract.Agenda.QUERY_AGENDA_NO_CLIENTE);
		Cursor c = db.rawQuery(query, "" + id);

		Agenda agd = null;
		while (c.moveToNext()) {

			agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));

			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
			agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setFechaInicioReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INICIO_REAL)));
			agd.setFechaFinReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN_REAL)));
			agd.setFoto1Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO1_EXT));
			agd.setFoto2Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO2_EXT));
			agd.setFoto3Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO3_EXT));
			agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO1_INT));
			agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO2_INT));
			agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO3_INT));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.FIELD_OBSERVACIONES));
			agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
			agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
			agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
			agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
			agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
			agd.setLatitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LATITUD));
			agd.setLongitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LONGITUD));
			agd.setValorVenta(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_VALOR_VENTA));

			Cliente cl = new Cliente();
			cl.setNombreCompleto(agd.getNombreCompleto());
			cl.setIdCliente(agd.getIdCliente());
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.FIELD_CONTACTO_ID));

			agd.setCliente(cl);

			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setClienteDireccion(cld);

			if(agd.getIdAgenda() == 0)
				agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getID(), agd.getIdRuta(), true));
			else
				agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

			//agd.setPedido(Pedido.getPedidoByAgenda(db, agd.getID()));
		}
		c.close();
		return agd;
	}

	public static Agenda getAgendaServer(DataBase db, long id){

		String query = QueryDir.getQuery(Contract.Agenda.QUERY_AGENDA_ID_SERVER);
		Cursor c = db.rawQuery(query,""+id);

		Agenda agd = null;
		while(c.moveToNext()){

			agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));

			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
			agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setFechaInicioReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INICIO_REAL)));
			agd.setFechaFinReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN_REAL)));
			agd.setFoto1Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO1_EXT));
			agd.setFoto2Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO2_EXT));
			agd.setFoto3Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO3_EXT));
			agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO1_INT));
			agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO2_INT));
			agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO3_INT));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.FIELD_OBSERVACIONES));
			agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
			agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
			agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
			agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
			agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
			agd.setEnviado(CursorUtils.getBoolean(c, Contract.Agenda.COLUMN_ENVIADO));
			agd.setValorVenta(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_VALOR_VENTA));

			Cliente cl = new Cliente();
			cl.setNombreCompleto(agd.getNombreCompleto());
			cl.setCorreoElectronico(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CORREO_ELECTRONICO));
			cl.setURLFoto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_URL_FOTO));
			cl.setID(agd.getIdCliente());
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.FIELD_CONTACTO_ID));
			agd.setContacto(Contacto.getContactoId(db, agd.getIdContacto(), agd.getIdCliente()));

			agd.setCliente(cl);

			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_TELEFONO)));
			agd.setClienteDireccion(cld);

			agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

		}
		c.close();
		return agd;
	}

	public static Agenda getAgendaServerByTicks(DataBase db, long ticks){

		String query = QueryDir.getQuery(Contract.Agenda.QUERY_AGENDA_TICKS);
		Cursor c = db.rawQuery(query,""+ticks);

		Agenda agd = null;
		while(c.moveToNext()){

			agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));

			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
			agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setFechaInicioReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INICIO_REAL)));
			agd.setFechaFinReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN_REAL)));
			agd.setFoto1Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO1_EXT));
			agd.setFoto2Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO2_EXT));
			agd.setFoto3Ext(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO3_EXT));
			agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO1_INT));
			agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO2_INT));
			agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.FIELD_FOTO3_INT));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.FIELD_OBSERVACIONES));
			agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
			agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
			agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
			agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
			agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
			agd.setValorVenta(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_VALOR_VENTA));

			Cliente cl = new Cliente();
			cl.setNombreCompleto(agd.getNombreCompleto());
			cl.setCorreoElectronico(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CORREO_ELECTRONICO));
			cl.setURLFoto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_URL_FOTO));
			cl.setID(agd.getIdCliente());
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.FIELD_CONTACTO_ID));
			agd.setContacto(Contacto.getContactoId(db, agd.getIdContacto(), agd.getIdCliente()));

			agd.setCliente(cl);

			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_TELEFONO)));
			agd.setClienteDireccion(cld);

			agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

		}
		c.close();
		return agd;
	}

	public static Agenda getAgendaUpload(DataBase db, long id){

		String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA_UPLOAD );
		Cursor c = db.rawQuery(query,""+id);

		Agenda agd = null;
		if(c.moveToFirst())
		{

			agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
			agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID));
			agd.setFechaInicioReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_INICIO_REAL));
			agd.setFechaFinReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_FIN_REAL));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));
			agd.setFechaInicio(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_INICIO)));
			agd.setFechaFin(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_FIN)));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
			agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO1_INT));
			agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO2_INT));
			agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO3_INT));
			agd.setFoto1Ext(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO1_EXT));
			agd.setFoto2Ext(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO2_EXT));
			agd.setFoto3Ext(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO3_EXT));
			agd.setIdMotivoNoVisita(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID));
			agd.setLatitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LATITUD));
			agd.setLongitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LONGITUD));
			agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
			agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
			agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
			agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
			agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
			agd.setValorVenta(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_VALOR_VENTA));

			agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));
			agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));
			if(agd.getCliente() != null) {
				agd.setNombreCompleto(agd.getCliente().getNombreCompleto());
				agd.setClienteDireccion(rp3.berlin.models.ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
				agd.setDireccion(agd.getClienteDireccion().getDireccion());
			}
			else
			{
				agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
				agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			}

		}
		c.close();
		return agd;
	}

	public static String getAgendaEstado(DataBase db, long id){

		Cursor c = db.query(Contract.Agenda.TABLE_NAME, new String[]{Contract.Agenda._ID, Contract.Agenda.COLUMN_AGENDA_ID,
						Contract.Agenda.COLUMN_ESTADO_AGENDA},
				Contract.Agenda._ID + " = ? ", id);

		String estado = "";
		if (c.moveToFirst()) {
			estado = CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA);
		}
		c.close();
		return estado;
	}

	public static List<Agenda> getAgendaClienteInterno(DataBase db, long id) {

		Cursor c = db.query(Contract.Agenda.TABLE_NAME, new String[]{Contract.Agenda._ID, Contract.Agenda.COLUMN_AGENDA_ID, Contract.Agenda.COLUMN_CLIENTE_ID,
						Contract.Agenda.COLUMN_RUTA_ID, Contract.Agenda.COLUMN_FECHA_INICIO_REAL, Contract.Agenda.COLUMN_FECHA_FIN_REAL, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID,
						Contract.Agenda.COLUMN_ESTADO_AGENDA, Contract.Agenda.COLUMN_CONTACTO_ID, Contract.Agenda.COLUMN_FECHA_INICIO,
						Contract.Agenda.COLUMN_FECHA_FIN, Contract.Agenda.COLUMN_OBSERVACIONES, Contract.Agenda.COLUMN_CONTACTO_ID,
						Contract.Agenda.COLUMN_FOTO1_INT, Contract.Agenda.COLUMN_FOTO2_INT, Contract.Agenda.COLUMN_FOTO3_INT,
						Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID, Contract.Agenda.COLUMN_LATITUD, Contract.Agenda.COLUMN_LONGITUD, Contract.Agenda.COLUMN_DISTANCIA,
						Contract.Agenda.COLUMN_DURACION, Contract.Agenda.COLUMN_TIEMPO_VIAJE, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION},
				Contract.Agenda.COLUMN_CLIENTE_ID_EXT + " = ?", id);

		List<Agenda> agds = new ArrayList<Agenda>();
		if (c.moveToFirst())
		{
			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
			agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID));
			agd.setFechaInicioReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_INICIO_REAL));
			agd.setFechaFinReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_FIN_REAL));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));
			agd.setFechaInicio(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_INICIO)));
			agd.setFechaFin(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_FIN)));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
			agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO1_INT));
			agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO2_INT));
			agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO3_INT));
			agd.setIdMotivoNoVisita(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID));
			agd.setLatitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LATITUD));
			agd.setLongitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LONGITUD));
			agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
			agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
			agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
			agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
			agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));

			agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));
			agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));
			agd.setNombreCompleto(agd.getCliente().getNombreCompleto());
			agd.setClienteDireccion(rp3.berlin.models.ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
			agd.setDireccion(agd.getClienteDireccion().getDireccion());
			agds.add(agd);
		}
		c.close();
		return agds;
	}

	public static List<Agenda> getAgendaInserts(DataBase db){
		Cursor c = db.query(Contract.Agenda.TABLE_NAME, new String[]{Contract.Agenda._ID, Contract.Agenda.COLUMN_AGENDA_ID, Contract.Agenda.COLUMN_CLIENTE_ID,
						Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID, Contract.Agenda.COLUMN_RUTA_ID, Contract.Agenda.COLUMN_FECHA_INICIO_REAL, Contract.Agenda.COLUMN_FECHA_FIN_REAL,
						Contract.Agenda.COLUMN_ESTADO_AGENDA, Contract.Agenda.COLUMN_CONTACTO_ID, Contract.Agenda.COLUMN_FECHA_INICIO,
						Contract.Agenda.COLUMN_FECHA_FIN, Contract.Agenda.COLUMN_OBSERVACIONES, Contract.Agenda.COLUMN_CONTACTO_ID,
						Contract.Agenda.COLUMN_FOTO1_INT, Contract.Agenda.COLUMN_FOTO2_INT, Contract.Agenda.COLUMN_FOTO3_INT,
						Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID, Contract.Agenda.COLUMN_LATITUD, Contract.Agenda.COLUMN_LONGITUD, Contract.Agenda.COLUMN_DISTANCIA,
						Contract.Agenda.COLUMN_DURACION, Contract.Agenda.COLUMN_TIEMPO_VIAJE, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION, Contract.Agenda.COLUMN_FECHA_CREACION},
				Contract.Agenda.COLUMN_AGENDA_ID + " = ? ", 0);

		List<Agenda> list_agenda = new ArrayList<Agenda>();
		if(c.moveToFirst())
		{
			do
			{
				Agenda agd = new Agenda();
				agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
				agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
				agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
				agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
				agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
				agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID));
				agd.setFechaInicioReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_INICIO_REAL));
				agd.setFechaFinReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_FIN_REAL));
				agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));
				agd.setFechaInicio(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_INICIO)));
				agd.setFechaFin(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_FIN)));
				agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));
				agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
				agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO1_INT));
				agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO2_INT));
				agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO3_INT));
				agd.setIdMotivoNoVisita(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID));
				agd.setLatitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LATITUD));
				agd.setLongitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LONGITUD));
				agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));
				agd.setNombreCompleto(agd.getCliente().getNombreCompleto());
				agd.setClienteDireccion(rp3.berlin.models.ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
				agd.setDireccion(agd.getClienteDireccion().getDireccion());
				agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
				agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
				agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
				agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
				agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));

				if(agd.getIdAgenda() == 0)
					agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getID(), agd.getIdRuta(), true));
				else
					agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

				list_agenda.add(agd);
			}while(c.moveToNext());
		}
		c.close();
		return list_agenda;
	}

	public static List<Agenda> getAgendaPendientes(DataBase db){
		String query = QueryDir.getQuery(Contract.Agenda.QUERY_AGENDA_PENDIENTES);

		Cursor c = db.rawQuery(query);

		List<Agenda> list_agenda = new ArrayList<Agenda>();
		if(c.moveToFirst())
		{
			do
			{
				Agenda agd = new Agenda();
				agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
				agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
				agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
				agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
				agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
				agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID));
				agd.setFechaInicioReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_INICIO_REAL));
				agd.setFechaFinReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_FIN_REAL));
				agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));
				agd.setFechaInicio(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_INICIO)));
				agd.setFechaFin(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_FIN)));
				agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));
				agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
				agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO1_INT));
				agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO2_INT));
				agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO3_INT));
				agd.setFoto1Ext(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO1_EXT));
				agd.setFoto2Ext(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO2_EXT));
				agd.setFoto3Ext(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO3_EXT));
				agd.setIdMotivoNoVisita(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID));
				agd.setLatitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LATITUD));
				agd.setLongitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LONGITUD));
				agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
				agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
				agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
				agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
				agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
				agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
				agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
				agd.setValorVenta(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_VALOR_VENTA));

				if(agd.getIdAgenda() == 0)
					agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getID(), agd.getIdRuta(), true));
				else
					agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

				list_agenda.add(agd);
			}while(c.moveToNext());

		}
		c.close();
		return list_agenda;
	}

	public static Agenda getAgendaSyncGoogle(DataBase db, String obs){
		Cursor c = db.query(Contract.Agenda.TABLE_NAME, new String[]{Contract.Agenda._ID, Contract.Agenda.COLUMN_AGENDA_ID, Contract.Agenda.COLUMN_CLIENTE_ID,
						Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID, Contract.Agenda.COLUMN_RUTA_ID, Contract.Agenda.COLUMN_FECHA_INICIO_REAL, Contract.Agenda.COLUMN_FECHA_FIN_REAL,
						Contract.Agenda.COLUMN_ESTADO_AGENDA, Contract.Agenda.COLUMN_CONTACTO_ID, Contract.Agenda.COLUMN_FECHA_INICIO,
						Contract.Agenda.COLUMN_FECHA_FIN, Contract.Agenda.COLUMN_OBSERVACIONES, Contract.Agenda.COLUMN_CONTACTO_ID, Contract.Agenda.COLUMN_FOTO1_EXT,
						Contract.Agenda.COLUMN_FOTO1_INT, Contract.Agenda.COLUMN_FOTO2_INT, Contract.Agenda.COLUMN_FOTO3_INT,
						Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID, Contract.Agenda.COLUMN_LATITUD, Contract.Agenda.COLUMN_LONGITUD, Contract.Agenda.COLUMN_DISTANCIA,
						Contract.Agenda.COLUMN_DURACION, Contract.Agenda.COLUMN_TIEMPO_VIAJE, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION, Contract.Agenda.COLUMN_FECHA_CREACION},
				Contract.Agenda.COLUMN_FOTO1_EXT + " = ? ", new String[]{obs});
		Agenda agd = new Agenda();
		if(c.moveToFirst())
		{
			do
			{

				agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
				agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
				agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
				agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
				agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
				agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID));
				agd.setFechaInicioReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_INICIO_REAL));
				agd.setFechaFinReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_FIN_REAL));
				agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));
				agd.setFechaInicio(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_INICIO)));
				agd.setFechaFin(Convert.getDateFromTicks(CursorUtils.getLong(c, Contract.Agenda.COLUMN_FECHA_FIN)));
				agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));
				agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
				agd.setFoto1Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO1_INT));
				agd.setFoto2Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO2_INT));
				agd.setFoto3Int(CursorUtils.getString(c, Contract.Agenda.COLUMN_FOTO3_INT));
				agd.setIdMotivoNoVisita(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_NO_VISITA_ID));
				agd.setLatitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LATITUD));
				agd.setLongitud(CursorUtils.getDouble(c, Contract.Agenda.COLUMN_LONGITUD));
				agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));
				agd.setNombreCompleto(agd.getCliente().getNombreCompleto());
				agd.setClienteDireccion(rp3.berlin.models.ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
				agd.setDireccion(agd.getClienteDireccion().getDireccion());
				agd.setDuracion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DURACION));
				agd.setDistancia(CursorUtils.getInt(c, Contract.Agenda.COLUMN_DISTANCIA));
				agd.setTiempoViaje(CursorUtils.getInt(c, Contract.Agenda.COLUMN_TIEMPO_VIAJE));
				agd.setIdMotivoReprogramacion(CursorUtils.getString(c, Contract.Agenda.COLUMN_MOTIVO_REPROGRAMACION));
				agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));

				if(agd.getIdAgenda() == 0)
					agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getID(), agd.getIdRuta(), true));
				else
					agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta(), false));

			}while(c.moveToNext());
		}
		c.close();
		return agd;
	}


	public static List<Agenda> getAgendaSearch(DataBase db, String termSearch) {
		String query = QueryDir.getQuery(Contract.Agenda.QUERY_AGENDA_SEARCH);
		String version = db.getSQLiteVersion();
		int compare = Convert.versionCompare(version, Contants.SQLITE_VERSION_SEARCH);
		Cursor c = null;

		if(compare > 0)
			c = db.rawQuery(query, termSearch + "*");
		else
			c = db.rawQuery(query, "'*" + termSearch + "*'");


		List<Agenda> list = new ArrayList<Agenda>();
		while (c.moveToNext()) {

			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.AgendaExt.COLUMN_AGENDA_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.AgendaExt.COLUMN_FECHA_INICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.AgendaExt.COLUMN_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.AgendaExt.COLUMN_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			agd.setEnviado(CursorUtils.getBoolean(c, Contract.Agenda.COLUMN_ENVIADO));
			agd.setTipoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_TIPO_AGENDA));
			agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));

			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
//			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_TELEFONO)));
			agd.setClienteDireccion(cld);

			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.FIELD_CONTACTO_ID));
			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
			if(agd.getTipoAgenda().equalsIgnoreCase(Contants.TIPO_AGENDA_CLIENTE)) {
				agd.setCliente(rp3.berlin.models.Cliente.getClienteID(db, agd.getIdCliente(), false));
				agd.setContacto(Contacto.getContactoId(db, agd.getIdContacto(), agd.getIdCliente()));
			}

			list.add(agd);
		}
		c.close();
		return list;
	}

	public static List<Agenda> getRutaDia(DataBase db, Calendar cal) {

		long inicio = Convert.getTicksFromDate(cal.getTime());
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		long fin = Convert.getTicksFromDate(cal.getTime());

		String query = QueryDir.getQuery(Contract.Agenda.QUERY_AGENDA_DIAS);

		Cursor c = db.rawQuery(query, new String[]{inicio + "", fin + ""});

		List<Agenda> list = new ArrayList<Agenda>();

		if(c.moveToFirst())
		{
			do
			{
				Agenda agd = new Agenda();
				agd.setID(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
				agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
				agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
				agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
				agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
				agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
				agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));
				agd.set_idCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID_EXT));
				agd.set_idClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID_EXT));
				agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
				agd.setDireccion(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION));

				if(agd.getIdCliente() == 0)
					agd.setCliente(rp3.berlin.models.Cliente.getClienteID(db, agd.get_idCliente(), true));
				else
					agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));

				if(agd.getIdClienteDireccion() == 0)
					agd.setClienteDireccion(ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
				else
					agd.setClienteDireccion(ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
				list.add(agd);
			}while(c.moveToNext());
		}
		c.close();

		return list;
	}

	public static List<Agenda> getRutaDiaDashboard(DataBase db,	Calendar cal) {
		long inicio = Convert.getTicksFromDate(cal.getTime());
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		long fin = Convert.getTicksFromDate(cal.getTime());

		String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA_DASHBOARD );
		Cursor c = db.rawQuery(query,new String [] {inicio + "", fin + "" });

		List<Agenda> list = new ArrayList<Agenda>();

		if(c.moveToFirst())
		{
			do
			{
				Agenda agd = new Agenda();
				agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
				agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
				agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
				agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
				agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
				agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
				agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));
				agd.set_idCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID_EXT));
				agd.set_idClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID_EXT));
				agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
				agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
				agd.setFechaCreacion(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_CREACION));
				agd.setObservaciones(CursorUtils.getString(c, Contract.Agenda.COLUMN_OBSERVACIONES));

				if(agd.getIdCliente() == 0)
					agd.setCliente(rp3.berlin.models.Cliente.getClienteID(db, agd.get_idCliente(), true));
				else
					agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));

				if(agd.getIdClienteDireccion() == 0)
					agd.setClienteDireccion(ClienteDireccion.getClienteDireccionIdDireccionIntern(db, agd.get_idCliente(), agd.getIdClienteDireccion()));
				else
					agd.setClienteDireccion(ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
				list.add(agd);
			}while(c.moveToNext());
		}
		c.close();

		return list;
	}

	public static List<Agenda> getAgendaMinutes(DataBase db, long minutes_max, long minutes_min) {
		long actual = Calendar.getInstance().getTimeInMillis();
		Cursor c = db.query(Contract.Agenda.TABLE_NAME, new String[]{Contract.Agenda.COLUMN_AGENDA_ID, Contract.Agenda.COLUMN_CLIENTE_ID,
						Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID, Contract.Agenda.COLUMN_FECHA_INICIO, Contract.Agenda.COLUMN_FECHA_FIN,
						Contract.Agenda.COLUMN_ESTADO_AGENDA},
				"(" + Contract.Agenda.COLUMN_FECHA_INICIO + " - " + actual + ") <= " + minutes_max + " AND " +
						"(" + Contract.Agenda.COLUMN_FECHA_INICIO + " - " + actual + ") >= " + minutes_min + " AND " +
						Contract.Agenda.COLUMN_ESTADO_AGENDA + " = 'P'",
				null, null, null, Contract.Agenda.COLUMN_FECHA_INICIO + " ASC");

		List<Agenda> list = new ArrayList<Agenda>();
		if(c.moveToFirst())
		{
			do
			{
				Agenda agd = new Agenda();
				agd.setID(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
				agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
				agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
				agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
				agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
				agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));

				agd.setCliente(rp3.berlin.models.Cliente.getClienteIDServer(db, agd.getIdCliente(), false));
				agd.setClienteDireccion(ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
				list.add(agd);
			}while(c.moveToNext());
		}
		c.close();
		return list;
	}

	public static long getLastAgenda(DataBase db)
	{
		return db.queryMaxLong(Contract.Agenda.TABLE_NAME, Contract.Agenda.COLUMN_FECHA_FIN);
	}

	public static long getFirstAgenda(DataBase db)
	{
		return db.queryMinLong(Contract.Agenda.TABLE_NAME, Contract.Agenda.COLUMN_FECHA_INICIO);
	}

	public static void deleteAgendaIdServer(DataBase db, int idServer)
	{
		db.delete(Contract.Agenda.TABLE_NAME, Contract.Agenda.COLUMN_AGENDA_ID + " = ?", idServer);
	}

	public static void deleteAgendaSyncGoogle(DataBase db, int idCliente)
	{
		db.execSQL("UPDATE " + Contract.Agenda.TABLE_NAME + " SET " + Contract.Agenda.COLUMN_ESTADO_AGENDA + " = '" + Contants.ESTADO_ELIMINADO +
                "', " + Contract.Agenda.COLUMN_ENVIADO + " = 0 WHERE " + Contract.Agenda.COLUMN_CLIENTE_ID + " = " + idCliente);
	}

	public static int getCountVisitados(DataBase db, String estado, long inicio, long fin)
	{
		String query = QueryDir.getQuery( Contract.Agenda.QUERY_CONTEO );
		Cursor c = db.rawQuery(query, new String[]{estado, inicio + "", fin + ""});
		int cont = 0;
		if(c.moveToFirst())
		{
			cont = CursorUtils.getInt(c,"conteo");
		}
		c.close();
		return cont;
	}

	public static boolean existAgendaServer(DataBase db, int idServer)
	{
		Cursor c = db.query(Contract.Agenda.TABLE_NAME, Contract.Agenda._ID, Contract.Agenda.COLUMN_AGENDA_ID + " = ?", idServer + "");
		if(c.moveToFirst())
			return true;
		else
			return false;
	}

	public static boolean existAgendaServerByTime(DataBase db, long ticks)
	{
		Cursor c = db.query(Contract.Agenda.TABLE_NAME, Contract.Agenda._ID, Contract.Agenda.COLUMN_FECHA_CREACION + " = ?", ticks + "");
		if(c.moveToFirst())
			return true;
		else
			return false;
	}



	@Override
	protected boolean insertDb(DataBase db) {
		boolean result = false;

		try
		{
			result = super.insertDb(db);
			if(this.id == 0)
			{
				this.id = db.queryMaxLong(Contract.Agenda.TABLE_NAME, Contract.Agenda._ID);
			}

			if(result){
				for(AgendaTarea d : this.getAgendaTareas()){
					d.setIdAgenda(this.id);
					if(d.getID() == 0)
						result = AgendaTarea.insert(db, d);
					else
						result = AgendaTarea.update(db, d);

					if(!result) break;
				}

				if(result)
				{
					AgendaExt cl_ex = new AgendaExt();
					result = AgendaExt.insert(db, cl_ex);
				}
			}



		}catch(Exception ex){
			result = false;
			Log.e("Cliente Insert", ex.getMessage());
		}finally{
		}
		return result;
	}

	@Override
	protected boolean updateDb(DataBase db) {
		boolean result = super.updateDb(db);

		if(result)
		{
			AgendaExt cl_ex = new AgendaExt();
			result = AgendaExt.update(db, cl_ex);
		}
		return result;
	}



	public class AgendaExt extends EntityBase<AgendaExt>{

		@Override
		public long getID() {
			return id;
		}

		@Override
		public void setID(long idext) {
			id = idext;
		}

		@Override
		public boolean isAutoGeneratedId() {
			return false;
		}

		@Override
		public String getTableName() {
			return Contract.AgendaExt.TABLE_NAME;
		}

		@Override
		public void setValues() {
			if(getAction() == ACTION_INSERT){
				setValue(Contract.AgendaExt.COLUMN_ID , id);
			}
			setValue(Contract.AgendaExt.COLUMN_NOMBRE, nombreCompleto  );
			setValue(Contract.AgendaExt.COLUMN_DIRECCION, direccion);
			setValue(Contract.AgendaExt.COLUMN_CIUDAD, ciudad);
		}

		@Override
		public Object getValue(String key) {
			return null;
		}

		@Override
		public String getDescription() {
			return null;
		}

		@Override
		public String getWhere() {
			return Contract.AgendaExt.COLUMN_ID + " = ?";
		}
	}
}
