package rp3.berlin.models.pedido;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import rp3.data.entity.EntityBase;
import rp3.db.QueryDir;
import rp3.db.sqlite.DataBase;
import rp3.berlin.Contants;
import rp3.berlin.db.Contract;
import rp3.util.CursorUtils;

/**
 * Created by magno_000 on 06/04/2017.
 */

public class LibroPrecio extends EntityBase<LibroPrecio> {

    private long id;
    private String idLibro;
    private String item;
    private String descripcion;
    private String divisa;
    private double precio;
    private String medida;
    private Date fechaEfectiva;
    private Date fechaVencimiento;
    private double valorEscalado;
    private int tipoEscalado;
    private String libroEstandar;
    private int parametroDesc;


    @Override
    public long getID() {
        return id;
    }

    @Override
    public void setID(long id) {
        this.id = id;
    }

    @Override
    public boolean isAutoGeneratedId() {
        return true;
    }

    @Override
    public String getTableName() {
        return Contract.LibroPrecio.TABLE_NAME;
    }

    public String getIdLibro() {
        return idLibro;
    }

    public void setIdLibro(String idLibro) {
        this.idLibro = idLibro;
    }

    public String getItem() {
        return item;
    }

    public void setItem(String item) {
        this.item = item;
    }

    public String getDivisa() {
        return divisa;
    }

    public void setDivisa(String divisa) {
        this.divisa = divisa;
    }

    public double getPrecio() {
        return precio;
    }

    public void setPrecio(double precio) {
        this.precio = precio;
    }

    public String getMedida() {
        return medida;
    }

    public void setMedida(String medida) {
        this.medida = medida;
    }

    public Date getFechaEfectiva() {
        return fechaEfectiva;
    }

    public void setFechaEfectiva(Date fechaEfectiva) {
        this.fechaEfectiva = fechaEfectiva;
    }

    public Date getFechaVencimiento() {
        return fechaVencimiento;
    }

    public void setFechaVencimiento(Date fechaVencimiento) {
        this.fechaVencimiento = fechaVencimiento;
    }

    public double getValorEscalado() {
        return valorEscalado;
    }

    public void setValorEscalado(double valorEscalado) {
        this.valorEscalado = valorEscalado;
    }

    public int getTipoEscalado() {
        return tipoEscalado;
    }

    public void setTipoEscalado(int tipoEscalado) {
        this.tipoEscalado = tipoEscalado;
    }

    public String getLibroEstandar() {
        return libroEstandar;
    }

    public void setLibroEstandar(String libroEstandar) {
        this.libroEstandar = libroEstandar;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public int getParametroDesc() {
        return parametroDesc;
    }

    public void setParametroDesc(int parametroDesc) {
        this.parametroDesc = parametroDesc;
    }

    @Override
    public void setValues() {
        setValue(Contract.LibroPrecio.COLUMN_FECHA_EFECTIVA, this.fechaEfectiva);
        setValue(Contract.LibroPrecio.COLUMN_FECHA_VENCIMIENTO, this.fechaVencimiento);
        setValue(Contract.LibroPrecio.COLUMN_DIVISA, this.divisa);
        setValue(Contract.LibroPrecio.COLUMN_ID_LIBRO, this.idLibro);
        setValue(Contract.LibroPrecio.COLUMN_ITEM, this.item);
        setValue(Contract.LibroPrecio.COLUMN_MEDIDA, this.medida);
        setValue(Contract.LibroPrecio.COLUMN_PRECIO, this.precio);
        setValue(Contract.LibroPrecio.COLUMN_VALOR_ESCALADO, this.valorEscalado);
        setValue(Contract.LibroPrecio.COLUMN_TIPO_ESCALADO, this.tipoEscalado);
        setValue(Contract.LibroPrecio.COLUMN_LIBRO_ESTANDAR, this.libroEstandar);
    }

    @Override
    public Object getValue(String key) {
        return id;
    }

    @Override
    public String getDescription() {
        return item;
    }

    public static List<LibroPrecio> getPrecio(DataBase db, String item, String cliente, String listaPrecio) {
        boolean irAEstandar = true;
        String query = QueryDir.getQuery(Contract.LibroPrecio.QUERY_LIBRO_PRECIO);
        Calendar cal = Calendar.getInstance();

        Cursor c = db.rawQuery(query, new String[]{item, cliente, listaPrecio, cal.getTimeInMillis() + "", cal.getTimeInMillis() + ""} );

        List<LibroPrecio> list = new ArrayList<>();
        while(c.moveToNext()){
            LibroPrecio precio = new LibroPrecio();
            precio.setItem(CursorUtils.getString(c, Contract.LibroPrecio.COLUMN_ITEM));
            precio.setPrecio(CursorUtils.getDouble(c, Contract.LibroPrecio.COLUMN_PRECIO));
            precio.setValorEscalado(CursorUtils.getDouble(c, Contract.LibroPrecio.COLUMN_VALOR_ESCALADO));
            precio.setFechaEfectiva(CursorUtils.getDate(c, Contract.LibroPrecio.COLUMN_FECHA_EFECTIVA));
            precio.setIdLibro(CursorUtils.getString(c, Contract.LibroPrecio.COLUMN_ID_LIBRO));
            precio.setParametroDesc(CursorUtils.getInt(c, Contract.MatrizPrecio.COLUMN_PARAMETRO_DESC));
            if(precio.getValorEscalado() == 0)
                irAEstandar = false;
            list.add(precio);
        }
        c.close();

        if(list.size() == 0 || irAEstandar)
        {
            query = QueryDir.getQuery(Contract.LibroPrecio.QUERY_LIBRO_PRECIO_ESTANDAR);

            Cursor d = db.rawQuery(query, new String[]{item, cal.getTimeInMillis() + "", cal.getTimeInMillis() + ""} );

            while(d.moveToNext()){
                LibroPrecio precio = new LibroPrecio();
                precio.setItem(CursorUtils.getString(d, Contract.LibroPrecio.COLUMN_ITEM));
                precio.setPrecio(CursorUtils.getDouble(d, Contract.LibroPrecio.COLUMN_PRECIO));
                precio.setValorEscalado(CursorUtils.getDouble(d, Contract.LibroPrecio.COLUMN_VALOR_ESCALADO));
                precio.setFechaEfectiva(CursorUtils.getDate(d, Contract.LibroPrecio.COLUMN_FECHA_EFECTIVA));
                precio.setIdLibro(CursorUtils.getString(d, Contract.LibroPrecio.COLUMN_ID_LIBRO));
                precio.setParametroDesc(CursorUtils.getInt(d, Contract.MatrizPrecio.COLUMN_PARAMETRO_DESC));
                list.add(precio);
            }
            d.close();
        }
        return list;
    }

    public static List<LibroPrecio> consultaPrecioGeneral(DataBase db, String libro, String item, String linea) {
        String query = null;
        if(libro.equalsIgnoreCase(Contants.LIBRO_ESTANDAR))
            query = QueryDir.getQuery(Contract.LibroPrecio.QUERY_CONSULTA_STANDARD);
        if(libro.equalsIgnoreCase(Contants.LIBRO_REMATE))
            query = QueryDir.getQuery(Contract.LibroPrecio.QUERY_CONSULTA_REMATE);

        Cursor c = db.rawQuery(query, new String[]{item, item, linea, linea} );

        List<LibroPrecio> list = new ArrayList<>();
        while(c.moveToNext()){
            LibroPrecio precio = new LibroPrecio();
            precio.setItem(CursorUtils.getString(c, Contract.LibroPrecio.COLUMN_ITEM));
            precio.setDescripcion(CursorUtils.getString(c, Contract.ProductoExt.COLUMN_DESCRIPCION));
            precio.setPrecio(CursorUtils.getDouble(c, Contract.LibroPrecio.COLUMN_PRECIO));
            precio.setMedida(CursorUtils.getString(c, Contract.LibroPrecio.COLUMN_MEDIDA));
            precio.setIdLibro(CursorUtils.getString(c, Contract.LibroPrecio.COLUMN_ID_LIBRO));
            precio.setFechaEfectiva(CursorUtils.getDate(c, Contract.LibroPrecio.COLUMN_FECHA_EFECTIVA));
            list.add(precio);
        }
        c.close();
        return list;
    }

    public static List<LibroPrecio> consultaPrecioCliente(DataBase db, String item, String cliente) {
        String query = QueryDir.getQuery(Contract.LibroPrecio.QUERY_CONSULTA_CLIENTE);
        Cursor c = db.rawQuery(query, new String[]{cliente, cliente, item, item});

        List<LibroPrecio> list = new ArrayList<>();
        while (c.moveToNext()) {
            LibroPrecio precio = new LibroPrecio();
            precio.setItem(CursorUtils.getString(c, Contract.LibroPrecio.COLUMN_ITEM));
            precio.setDescripcion(CursorUtils.getString(c, Contract.ProductoExt.COLUMN_DESCRIPCION));
            precio.setPrecio(CursorUtils.getDouble(c, Contract.LibroPrecio.COLUMN_PRECIO));
            precio.setIdLibro(CursorUtils.getString(c, Contract.LibroPrecio.COLUMN_ID_LIBRO));
            precio.setMedida(CursorUtils.getString(c, Contract.LibroPrecio.COLUMN_MEDIDA));
            list.add(precio);
        }
        c.close();
        return list;
    }
}
