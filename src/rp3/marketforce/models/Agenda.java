package rp3.marketforce.models;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import rp3.data.entity.EntityBase;
import rp3.db.QueryDir;
import rp3.db.sqlite.DataBase;
import rp3.marketforce.db.Contract;
import rp3.marketforce.models.Cliente.ClientExt;
import rp3.util.Convert;
import rp3.util.CursorUtils;
import android.database.Cursor;
import android.util.Log;

public class Agenda extends rp3.data.entity.EntityBase<Agenda>{

	private long id;
	private int idRuta;
	private int idAgenda;
	private int idCliente;
	private int idClienteDireccion;
	private int idProgramacionRuta;
	private int idContacto;
	private Date fechaInicio;
	private Date fechaFin;
	private Date fechaInicioReal;
	private Date fechaFinReal;
	private boolean enviado;
	private String estadoAgenda;
	private ClienteDireccion clienteDireccion;
	private List<AgendaTarea> agendaTareas;
	private String nombreCompleto;
	private String ciudad;
	private String direccion;
	private String estadoAgendaDescripcion;
	private Cliente Cliente;
	
	@Override
	public long getID() {
		return id;
	}

	@Override
	public void setID(long id) {
		this.id = id;
	}

	@Override
	public boolean isAutoGeneratedId() {
		return false;
	}

	@Override
	public String getTableName() {
		return Contract.Agenda.TABLE_NAME;
	}

	@Override
	public void setValues() {
		
		setValue(Contract.Agenda._ID, this.id);
		setValue(Contract.Agenda.COLUMN_RUTA_ID, this.idRuta);
		setValue(Contract.Agenda.COLUMN_AGENDA_ID, this.idAgenda);
		setValue(Contract.Agenda.COLUMN_CLIENTE_ID, this.idCliente);
		setValue(Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID, this.idClienteDireccion);
		setValue(Contract.Agenda.COLUMN_PROGRAMACION_RUTA_ID, this.idProgramacionRuta);
		setValue(Contract.Agenda.COLUMN_FECHA_INICIO ,this.fechaInicio);
		setValue(Contract.Agenda.COLUMN_FECHA_FIN, this.fechaFin);
		setValue(Contract.Agenda.COLUMN_ESTADO_AGENDA, this.estadoAgenda);
		setValue(Contract.Agenda.COLUMN_FECHA_INICIO_REAL, this.fechaInicioReal);
		setValue(Contract.Agenda.COLUMN_FECHA_FIN_REAL, this.fechaFinReal);
		setValue(Contract.Agenda.COLUMN_ENVIADO, this.enviado);
		setValue(Contract.Agenda.COLUMN_CONTACTO_ID, this.idContacto);
	}

	@Override
	public Object getValue(String key) {
		return null;
	}

	@Override
	public String getDescription() {
		return null;
	}

	public int getIdRuta() {
		return idRuta;
	}

	public void setIdRuta(int idRuta) {
		this.idRuta = idRuta;
	}

	public int getIdAgenda() {
		return idAgenda;
	}

	public void setIdAgenda(int idAgenda) {
		this.idAgenda = idAgenda;
	}

	public int getIdCliente() {
		return idCliente;
	}

	public void setIdCliente(int idCliente) {
		this.idCliente = idCliente;
	}

	public int getIdClienteDireccion() {
		return idClienteDireccion;
	}

	public void setIdClienteDireccion(int idClienteDireccion) {
		this.idClienteDireccion = idClienteDireccion;
	}

	public int getIdProgramacionRuta() {
		return idProgramacionRuta;
	}

	public void setIdProgramacionRuta(int idProgramacionRuta) {
		this.idProgramacionRuta = idProgramacionRuta;
	}

	public Date getFechaInicio() {
		return fechaInicio;
	}

	public void setFechaInicio(Date fechaInicio) {
		this.fechaInicio = fechaInicio;
	}

	public Date getFechaFin() {
		return fechaFin;
	}

	public void setFechaFin(Date fechaFin) {
		this.fechaFin = fechaFin;
	}

	public boolean isEnviado() {
		return enviado;
	}

	public void setEnviado(boolean enviado) {
		this.enviado = enviado;
	}

	public String getEstadoAgenda() {
		return estadoAgenda;
	}

	public void setEstadoAgenda(String estadoAgenda) {
		this.estadoAgenda = estadoAgenda;
	}
	
	public ClienteDireccion getClienteDireccion() {
		return clienteDireccion;
	}

	public void setClienteDireccion(ClienteDireccion clienteDireccion) {
		this.clienteDireccion = clienteDireccion;
	}
	
	public List<AgendaTarea> getAgendaTareas() {
		if(agendaTareas==null)
			agendaTareas = new ArrayList<AgendaTarea>();		
		return agendaTareas;
	}

	public void setAgendaTareaList(List<AgendaTarea> agendaTareaList) {
		agendaTareas = agendaTareaList;
	}

	public String getNombreCompleto() {
		return nombreCompleto;
	}

	public void setNombreCompleto(String nombreCompleto) {
		this.nombreCompleto = nombreCompleto;
	}

	public String getCiudad() {
		return ciudad;
	}

	public void setCiudad(String ciudad) {
		this.ciudad = ciudad;
	}

	public String getDireccion() {
		return direccion;
	}

	public void setDireccion(String direccion) {
		this.direccion = direccion;
	}
	
	public String getEstadoAgendaDescripcion() {
		return estadoAgendaDescripcion;
	}

	public void setEstadoAgendaDescripcion(String estadoAgendaDescripcion) {
		this.estadoAgendaDescripcion = estadoAgendaDescripcion;
	}

	public Cliente getCliente() {
		return Cliente;
	}

	public void setCliente(Cliente cliente) {
		Cliente = cliente;
	}
	
	public int getIdContacto() {
		return idContacto;
	}

	public void setIdContacto(int idContacto) {
		this.idContacto = idContacto;
	}

	public Date getFechaInicioReal() {
		return fechaInicioReal;
	}

	public void setFechaInicioReal(Date fechaInicioReal) {
		this.fechaInicioReal = fechaInicioReal;
	}

	public Date getFechaFinReal() {
		return fechaFinReal;
	}

	public void setFechaFinReal(Date fechaFinReal) {
		this.fechaFinReal = fechaFinReal;
	}

	public static List<Agenda> getAgenda(DataBase db){
				
        String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA );
		
		Cursor c = db.rawQuery(query);
		
		List<Agenda> list = new ArrayList<Agenda>();
		while(c.moveToNext()){
			
			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));				
			//agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			
			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));			
			agd.setCiudad(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CIUDAD));			
			agd.setClienteDireccion(cld);
			
			list.add(agd);
		}
		return list;
	}
	
	public static List<Agenda> getAgendaSemanal(DataBase db){
		
        String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA_SEMANAL );
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1);
		
		Cursor c = db.rawQuery(query, Convert.getTicksFromDate(cal.getTime()));
		
		List<Agenda> list = new ArrayList<Agenda>();
		while(c.moveToNext()){
			
			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));				
			//agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			
			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));			
			agd.setCiudad(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CIUDAD));			
			agd.setClienteDireccion(cld);
			
			list.add(agd);
		}
		return list;
	}
	
	public static Agenda getAgenda(DataBase db, long id){
				
        String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA_ID );		
		Cursor c = db.rawQuery(query,""+id);
		
		Agenda agd = null;
		while(c.moveToNext()){
			
			agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.setIdAgenda(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
			
			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
			agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			agd.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			agd.setFechaInicioReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INICIO_REAL)));
			agd.setFechaFinReal((CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN_REAL)));
			
			Cliente cl = new Cliente();
			cl.setNombreCompleto(agd.getNombreCompleto());
			cl.setCorreoElectronico(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CORREO_ELECTRONICO));
			cl.setURLFoto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_URL_FOTO));
			cl.setID(agd.getIdCliente());
			
			agd.setCliente(cl);
			
			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_TELEFONO)));
			agd.setClienteDireccion(cld);
			
			agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getID(), agd.getIdRuta()));
			
		}
		return agd;
	}
	
	public static Agenda getAgendaUpload(DataBase db, long id){
		
		Cursor c = db.query(Contract.Agenda.TABLE_NAME, new String[] {Contract.Agenda.COLUMN_AGENDA_ID, Contract.Agenda.COLUMN_CLIENTE_ID,
				Contract.Agenda.COLUMN_RUTA_ID, Contract.Agenda.COLUMN_FECHA_INICIO_REAL, Contract.Agenda.COLUMN_FECHA_FIN_REAL,
				Contract.Agenda.COLUMN_ESTADO_AGENDA, Contract.Agenda.COLUMN_CONTACTO_ID, Contract.Agenda.COLUMN_FECHA_INICIO, 
				Contract.Agenda.COLUMN_FECHA_FIN}, 
				Contract.Agenda._ID + " = ? AND " +
				//Contract.Agenda.COLUMN_ESTADO_AGENDA + " = 'V' AND " +
				Contract.Agenda.COLUMN_ENVIADO + " = 0", id);
		
		Agenda agd = null;
		if(c.moveToFirst())
		{
			
			agd = new Agenda();
			agd.setIdRuta(CursorUtils.getInt(c, Contract.Agenda.COLUMN_RUTA_ID));
			agd.setIdContacto(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CONTACTO_ID));
			agd.setIdAgenda((int) id);
			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.COLUMN_CLIENTE_ID));
			agd.setFechaInicioReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_INICIO_REAL));
			agd.setFechaFinReal(CursorUtils.getDate(c, Contract.Agenda.COLUMN_FECHA_FIN_REAL));
			agd.setEstadoAgenda(CursorUtils.getString(c,Contract.Agenda.COLUMN_ESTADO_AGENDA));
			agd.setFechaInicio(Convert.getDateFromTicks(CursorUtils.getLong(c,Contract.Agenda.COLUMN_FECHA_INICIO)));
			agd.setFechaFin(Convert.getDateFromTicks(CursorUtils.getLong(c,Contract.Agenda.COLUMN_FECHA_FIN)));
			
			agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdAgenda(), agd.getIdRuta()));
			
		}
		return agd;
	}
	
	public static List<Agenda> getAgendaSearch(DataBase db, String termSearch)
	{		
		String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA_SEARCH );
		
		Cursor c = db.rawQuery(query, "*" + termSearch + "*" );
		
		List<Agenda> list = new ArrayList<Agenda>();
		while(c.moveToNext()){
			
			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.AgendaExt.COLUMN_AGENDA_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.AgendaExt.COLUMN_FECHA_INICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.AgendaExt.COLUMN_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.AgendaExt.COLUMN_ESTADO_AGENDA));
			agd.setNombreCompleto(CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE));
			agd.setEstadoAgendaDescripcion(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));
			
			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
//			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_TELEFONO)));
			agd.setClienteDireccion(cld);
			
			list.add(agd);
		}
		return list;
	}
	
	public static List<Agenda> getRutaDia(DataBase db, Calendar cal) {
		
		long inicio = Convert.getTicksFromDate(cal.getTime());
		cal.add(Calendar.DATE, 1);
		long fin = Convert.getTicksFromDate(cal.getTime());
		
		Cursor c = db.query(Contract.Agenda.TABLE_NAME, new String[] {Contract.Agenda.COLUMN_AGENDA_ID, Contract.Agenda.COLUMN_CLIENTE_ID,
				Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID, Contract.Agenda.COLUMN_FECHA_INICIO, Contract.Agenda.COLUMN_FECHA_FIN,
				Contract.Agenda.COLUMN_ESTADO_AGENDA}, 
				Contract.Agenda.COLUMN_FECHA_INICIO + " >= ? AND " +
				Contract.Agenda.COLUMN_FECHA_FIN + " <= ?", new String [] {inicio + "", fin + "" });
		
		List<Agenda> list = new ArrayList<Agenda>();
		
		if(c.moveToFirst())
		{
			do
			{
				Agenda agd = new Agenda();
				agd.setID(CursorUtils.getInt(c, Contract.Agenda.COLUMN_AGENDA_ID));
				agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
				agd.setIdClienteDireccion(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION_ID));
				agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
				agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
				agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.COLUMN_ESTADO_AGENDA));
				
				agd.setCliente(rp3.marketforce.models.Cliente.getClienteID(db, agd.getIdCliente(), false));
				agd.setClienteDireccion(ClienteDireccion.getClienteDireccionIdDireccion(db, agd.getIdCliente(), agd.getIdClienteDireccion()));
				list.add(agd);
			}while(c.moveToNext());
		}
		
		return list;
	}
	
	public static long getLastAgenda(DataBase db)
	{
		return db.queryMaxLong(Contract.Agenda.TABLE_NAME, Contract.Agenda.COLUMN_FECHA_FIN);
	}
	
	public static long getFirstAgenda(DataBase db)
	{
		return db.queryMinLong(Contract.Agenda.TABLE_NAME, Contract.Agenda.COLUMN_FECHA_INICIO);
	}
	
	
	
	@Override
	protected boolean insertDb(DataBase db) {
		boolean result = false;
		
		try
		{
			result = super.insertDb(db);
			
			if(result){
				for(AgendaTarea d : this.getAgendaTareas()){
					d.setIdAgenda(this.id);
					if(d.getID() == 0)
						result = AgendaTarea.insert(db, d);
					else
						result = AgendaTarea.update(db, d);
						
					if(!result) break;					
				}								
							
				if(result)
				{
					AgendaExt cl_ex = new AgendaExt();
					result = AgendaExt.insert(db, cl_ex);
				}
			}
			
			
						
		}catch(Exception ex){
			result = false;	
			Log.e("Cliente Insert", ex.getMessage());
		}finally{						
		}
		return result;	
	}
	
	@Override
	protected boolean updateDb(DataBase db) {
		boolean result = super.updateDb(db);
		
		if(result)
		{
			AgendaExt cl_ex = new AgendaExt();
			result = AgendaExt.update(db, cl_ex);
		}
		return result;
	}
	


	public class AgendaExt extends EntityBase<AgendaExt>{

		@Override
		public long getID() {
			return id;
		}

		@Override
		public void setID(long idext) {
			id = idext;
		}

		@Override
		public boolean isAutoGeneratedId() {
			return false;
		}

		@Override
		public String getTableName() {
			return Contract.AgendaExt.TABLE_NAME;
		}

		@Override
		public void setValues() {
			if(getAction() == ACTION_INSERT){
				setValue(Contract.AgendaExt.COLUMN_ID , id);
			}
			setValue(Contract.AgendaExt.COLUMN_NOMBRE, nombreCompleto  );
			setValue(Contract.AgendaExt.COLUMN_DIRECCION, direccion);
			setValue(Contract.AgendaExt.COLUMN_CIUDAD, ciudad);
		}

		@Override
		public Object getValue(String key) {
			return null;
		}

		@Override
		public String getDescription() {
			return null;
		}
		
		@Override
		public String getWhere() {			
			return Contract.AgendaExt.COLUMN_ID + " = ?";
		}
	}
}
