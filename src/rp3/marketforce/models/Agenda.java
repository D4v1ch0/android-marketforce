package rp3.marketforce.models;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import rp3.data.entity.EntityBase;
import rp3.db.QueryDir;
import rp3.db.sqlite.DataBase;
import rp3.marketforce.db.Contract;
import rp3.marketforce.models.Cliente.ClientExt;
import rp3.util.CursorUtils;
import android.database.Cursor;

public class Agenda extends rp3.data.entity.EntityBase<Agenda>{

	private long id;
	private int idRuta;
	private int idAgenda;
	private int idCliente;
	private int idClienteDireccion;
	private int idProgramacionRuta;
	private Date fechaInicio;
	private Date fechaFin;
	private String estadoAgenda;
	private Cliente cliente;
	private ClienteDireccion clienteDireccion;
	private List<AgendaTarea> AgendaTareaList;
	private String nombreCompleto;
	private String ciudad;
	private String direccion;
	
	
	@Override
	public long getID() {
		return id;
	}

	@Override
	public void setID(long id) {
		this.id = id;
	}

	@Override
	public boolean isAutoGeneratedId() {
		return false;
	}

	@Override
	public String getTableName() {
		return Contract.Agenda.TABLE_NAME;
	}

	@Override
	public void setValues() {
		
		setValue(Contract.Agenda._ID, this.id);
		setValue(Contract.Agenda.COLUMN_RUTA_ID, this.idRuta);
		setValue(Contract.Agenda.COLUMN_AGENDA_ID, this.idAgenda);
		setValue(Contract.Agenda.COLUMN_CLIENTE_ID, this.idCliente);
		setValue(Contract.Agenda.COLUMN_CLIENTE_DIRECCION_ID, this.idClienteDireccion);
		setValue(Contract.Agenda.COLUMN_PROGRAMACION_RUTA_ID, this.idProgramacionRuta);
		setValue(Contract.Agenda.COLUMN_FECHA_INICIO ,this.fechaInicio);
		setValue(Contract.Agenda.COLUMN_FECHA_FIN, this.fechaFin);
		setValue(Contract.Agenda.COLUMN_ESTADO_AGENDA, this.estadoAgenda);
	}

	@Override
	public Object getValue(String key) {
		return null;
	}

	@Override
	public String getDescription() {
		return null;
	}

	public int getIdRuta() {
		return idRuta;
	}

	public void setIdRuta(int idRuta) {
		this.idRuta = idRuta;
	}

	public int getIdAgenda() {
		return idAgenda;
	}

	public void setIdAgenda(int idAgenda) {
		this.idAgenda = idAgenda;
	}

	public int getIdCliente() {
		return idCliente;
	}

	public void setIdCliente(int idCliente) {
		this.idCliente = idCliente;
	}

	public int getIdClienteDireccion() {
		return idClienteDireccion;
	}

	public void setIdClienteDireccion(int idClienteDireccion) {
		this.idClienteDireccion = idClienteDireccion;
	}

	public int getIdProgramacionRuta() {
		return idProgramacionRuta;
	}

	public void setIdProgramacionRuta(int idProgramacionRuta) {
		this.idProgramacionRuta = idProgramacionRuta;
	}

	public Date getFechaInicio() {
		return fechaInicio;
	}

	public void setFechaInicio(Date fechaInicio) {
		this.fechaInicio = fechaInicio;
	}

	public Date getFechaFin() {
		return fechaFin;
	}

	public void setFechaFin(Date fechaFin) {
		this.fechaFin = fechaFin;
	}

	public String getEstadoAgenda() {
		return estadoAgenda;
	}

	public void setEstadoAgenda(String estadoAgenda) {
		this.estadoAgenda = estadoAgenda;
	}

	public Cliente getCliente() {
		return cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}
	
	public ClienteDireccion getClienteDireccion() {
		return clienteDireccion;
	}

	public void setClienteDireccion(ClienteDireccion clienteDireccion) {
		this.clienteDireccion = clienteDireccion;
	}
	
	public List<AgendaTarea> getAgendaTareaList() {
		return AgendaTareaList;
	}

	public void setAgendaTareaList(List<AgendaTarea> agendaTareaList) {
		AgendaTareaList = agendaTareaList;
	}

	public String getNombreCompleto() {
		return nombreCompleto;
	}

	public void setNombreCompleto(String nombreCompleto) {
		this.nombreCompleto = nombreCompleto;
	}

	public String getCiudad() {
		return ciudad;
	}

	public void setCiudad(String ciudad) {
		this.ciudad = ciudad;
	}

	public String getDireccion() {
		return direccion;
	}

	public void setDireccion(String direccion) {
		this.direccion = direccion;
	}

	public static List<Agenda> getAgenda(DataBase db){
				
        String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA );
		
		Cursor c = db.rawQuery(query);
		
		List<Agenda> list = new ArrayList<Agenda>();
		while(c.moveToNext()){
			
			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
			
			Cliente cl = new Cliente();
			cl.setNombreCompleto((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE_CLIENTE)));
			cl.setCorreoElectronico((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CORREO_CLIENTE)));
			agd.setCliente(cl);
			
			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_TELEFONO)));
			agd.setClienteDireccion(cld);
			
			list.add(agd);
		}
		return list;
	}
	
	public static Agenda getAgendaID(DataBase db, long id){
				
        String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA_ID );		
		Cursor c = db.rawQuery(query,""+id);
		
		Agenda agd = null;
		while(c.moveToNext()){
			
			agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.Agenda._ID));
			agd.setIdCliente(CursorUtils.getInt(c, Contract.Agenda.FIELD_CLIENTE_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_INCICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.Agenda.FIELD_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA));
						
			Cliente cl = new Cliente();
			cl.setNombreCompleto((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_NOMBRE_CLIENTE)));
			cl.setCorreoElectronico((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_CORREO_CLIENTE)));
			agd.setCliente(cl);
			
			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_DIRECCION)));
			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_TELEFONO)));
			agd.setClienteDireccion(cld);
			
			agd.setAgendaTareaList(AgendaTarea.getAgendaTareas(db, agd.getIdCliente()));
			
		}
		return agd;
	}
	
	public static List<Agenda> getAgendaSearch(DataBase db, String termSearch)
	{		
		String query = QueryDir.getQuery( Contract.Agenda.QUERY_AGENDA_SEARCH );
		
		Cursor c = db.rawQuery(query, "*" + termSearch + "*" );
		
		List<Agenda> list = new ArrayList<Agenda>();
		while(c.moveToNext()){
			
			Agenda agd = new Agenda();
			agd.setID(CursorUtils.getInt(c, Contract.AgendaExt.COLUMN_AGENDA_ID));
			agd.setFechaInicio(CursorUtils.getDate(c, Contract.AgendaExt.COLUMN_FECHA_INICIO));
			agd.setFechaFin(CursorUtils.getDate(c, Contract.AgendaExt.COLUMN_FECHA_FIN));
			agd.setEstadoAgenda(CursorUtils.getString(c, Contract.AgendaExt.COLUMN_ESTADO_AGENDA));
			
			Cliente cl = new Cliente();
			cl.setNombreCompleto((CursorUtils.getString(c, Contract.AgendaExt.COLUMN_NAME)));
//			cl.setCorreoElectronico((CursorUtils.getString(c, Contract.AgendaExt.FIELD_CLIENTE_CORREO_CLIENTE)));
			agd.setCliente(cl);
			
			ClienteDireccion cld = new ClienteDireccion();
			cld.setDireccion((CursorUtils.getString(c, Contract.AgendaExt.COLUMN_DIRECCION)));
//			cld.setTelefono1((CursorUtils.getString(c, Contract.Agenda.FIELD_CLIENTE_TELEFONO)));
			agd.setClienteDireccion(cld);
			
			list.add(agd);
		}
		return list;
	}
	
	
	@Override
	protected boolean insertDb(DataBase db) {
		boolean result = false;
		
		try
		{
//			db.beginTransaction();
			result = super.insertDb(db);
			
			if(result){
				for(AgendaTarea d : this.getAgendaTareaList()){
					d.setIdAgenda(this.id);
					if(d.getID() == 0)
						result = AgendaTarea.insert(db, d);
					else
						result = AgendaTarea.update(db, d);
						
					if(!result) break;					
				}								
				
//				if(result)
//					db.commitTransaction();
				
				if(result)
				{
					AgendaExt cl_ex = new AgendaExt();
					result = AgendaExt.insert(db, cl_ex);
				}
			}
			
			
						
		}catch(Exception ex){
			result = false;			
		}finally{						
		}
		return result;	
	}
	
	
	class AgendaExt extends EntityBase<ClientExt>{

		@Override
		public long getID() {
			return id;
		}

		@Override
		public void setID(long idext) {
			id = idext;
		}

		@Override
		public boolean isAutoGeneratedId() {
			return false;
		}

		@Override
		public String getTableName() {
			return Contract.AgendaExt.TABLE_NAME;
		}

		@Override
		public void setValues() {
			setValue(Contract.AgendaExt.COLUMN_ID , id);
			setValue(Contract.AgendaExt.COLUMN_NAME , nombreCompleto  );
			setValue(Contract.AgendaExt.COLUMN_DIRECCION, direccion);
			setValue(Contract.AgendaExt.COLUMN_CIUDAD, ciudad);
		}

		@Override
		public Object getValue(String key) {
			return null;
		}

		@Override
		public String getDescription() {
			return null;
		}
	}
}
