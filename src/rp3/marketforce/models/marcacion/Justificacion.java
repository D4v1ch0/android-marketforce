package rp3.marketforce.models.marcacion;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import rp3.data.entity.EntityBase;
import rp3.data.models.GeneralValue;
import rp3.db.QueryDir;
import rp3.db.sqlite.DataBase;
import rp3.marketforce.Contants;
import rp3.marketforce.db.Contract;
import rp3.util.CursorUtils;

/**
 * Created by magno_000 on 17/06/2015.
 */
public class Justificacion extends EntityBase<Justificacion>
{
    private long id;
    private Date fecha;
    private String tipo;
    private String observacion;
    private String observacionSupervisor;
    private int idPermiso;
    private int idAgente;
    private boolean ausencia;
    private String estado;
    private boolean pendiente;
    private boolean propia;
    private String jornada;

    private String agente;
    private String tipoDescripcion;

    @Override
    public long getID() {
        // TODO Auto-generated method stub
        return id;
    }

    @Override
    public void setID(long id) {
        this.id = id;

    }

    public Date getFecha() {
        return fecha;
    }

    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public String getObservacion() {
        return observacion;
    }

    public void setObservacion(String observacion) {
        this.observacion = observacion;
    }

    public int getIdPermiso() {
        return idPermiso;
    }

    public void setIdPermiso(int idPermiso) {
        this.idPermiso = idPermiso;
    }

    public boolean isAusencia() {
        return ausencia;
    }

    public void setAusencia(boolean ausencia) {
        this.ausencia = ausencia;
    }

    public boolean isPendiente() {
        return pendiente;
    }

    public void setPendiente(boolean pendiente) {
        this.pendiente = pendiente;
    }

    public boolean isPropia() {
        return propia;
    }

    public void setPropia(boolean propia) {
        this.propia = propia;
    }

    public int getIdAgente() {
        return idAgente;
    }

    public void setIdAgente(int idAgente) {
        this.idAgente = idAgente;
    }

    public String getAgente() {
        return agente;
    }

    public void setAgente(String agente) {
        this.agente = agente;
    }

    public String getTipoDescripcion() {
        return tipoDescripcion;
    }

    public void setTipoDescripcion(String tipoDescripcion) {
        this.tipoDescripcion = tipoDescripcion;
    }

    public String getObservacionSupervisor() {
        return observacionSupervisor;
    }

    public void setObservacionSupervisor(String observacionSupervisor) {
        this.observacionSupervisor = observacionSupervisor;
    }

    public String getJornada() {
        return jornada;
    }

    public void setJornada(String jornada) {
        this.jornada = jornada;
    }

    public String getEstado() {
        return estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }

    @Override
    public boolean isAutoGeneratedId() {
        // TODO Auto-generated method stub
        return true;
    }

    @Override
    public String getTableName() {
        // TODO Auto-generated method stub
        return Contract.Justificaciones.TABLE_NAME;
    }

    @Override
    public void setValues() {
        setValue(Contract.Justificaciones.COLUMN_OBSERVACION, this.observacion);
        setValue(Contract.Justificaciones.COLUMN_OBSERVACION_SUPERVISOR, this.observacionSupervisor);
        setValue(Contract.Justificaciones.COLUMN_FECHA, this.fecha);
        setValue(Contract.Justificaciones.COLUMN_AUSENCIA, this.ausencia);
        setValue(Contract.Justificaciones.COLUMN_TIPO, this.tipo);
        setValue(Contract.Justificaciones.COLUMN_ID_PERMISO, this.idPermiso);
        setValue(Contract.Justificaciones.COLUMN_ESTADO, this.estado);
        setValue(Contract.Justificaciones.COLUMN_PENDIENTE, this.pendiente);
        setValue(Contract.Justificaciones.COLUMN_PROPIA, this.propia);
        setValue(Contract.Justificaciones.COLUMN_ID_AGENTE, this.idAgente);
        setValue(Contract.Justificaciones.COLUMN_JORNADA, this.jornada);
    }

    @Override
    public Object getValue(String key) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String getDescription() {
        // TODO Auto-generated method stub
        return null;
    }

    public static List<Justificacion> getPermisosPendientesPropias(DataBase db) {
        Cursor c = db.query(Contract.Justificaciones.TABLE_NAME, new String[]{Contract.Justificaciones._ID, Contract.Justificaciones.COLUMN_FECHA, Contract.Justificaciones.COLUMN_ID_PERMISO,
                        Contract.Justificaciones.COLUMN_TIPO, Contract.Justificaciones.COLUMN_OBSERVACION, Contract.Justificaciones.COLUMN_AUSENCIA, Contract.Justificaciones.COLUMN_ESTADO,
                        Contract.Justificaciones.COLUMN_PENDIENTE, Contract.Justificaciones.COLUMN_PROPIA, Contract.Justificaciones.COLUMN_OBSERVACION_SUPERVISOR, Contract.Justificaciones.COLUMN_JORNADA}
                , Contract.Justificaciones.COLUMN_PENDIENTE + " = ? AND " + Contract.Justificaciones.COLUMN_PROPIA + " = ?",
                new String[]{1 + "", 1 + ""});
        List<Justificacion> permisos = new ArrayList<Justificacion>();

        if (c.moveToFirst()) {
            Justificacion permiso = new Justificacion();
            permiso.setID(CursorUtils.getLong(c, Contract.Justificaciones._ID));
            permiso.setIdPermiso(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_PERMISO));
            permiso.setAusencia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_AUSENCIA));
            permiso.setTipo(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_TIPO));
            permiso.setFecha(CursorUtils.getDate(c, Contract.Justificaciones.COLUMN_FECHA));
            permiso.setObservacion(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION));
            permiso.setEstado(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_ESTADO));
            permiso.setPendiente(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PENDIENTE));
            permiso.setPropia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PROPIA));
            permiso.setJornada(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_JORNADA));
            permisos.add(permiso);
        }
        c.close();
        return permisos;

    }

    public static List<Justificacion> getPermisosPendientesAprobar(DataBase db) {
        String query = QueryDir.getQuery(Contract.Justificaciones.QUERY_PERMISOS_POR_APROBAR);

        Cursor c = db.rawQuery(query);
        List<Justificacion> permisos = new ArrayList<Justificacion>();

        if (c.moveToFirst()) {
            do {


                Justificacion permiso = new Justificacion();
                permiso.setID(CursorUtils.getLong(c, Contract.Justificaciones._ID));
                permiso.setIdPermiso(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_PERMISO));
                permiso.setIdAgente(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_AGENTE));
                permiso.setAusencia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_AUSENCIA));
                permiso.setTipo(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_TIPO));
                permiso.setFecha(CursorUtils.getDate(c, Contract.Justificaciones.COLUMN_FECHA));
                permiso.setObservacion(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION));
                permiso.setEstado(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_ESTADO));
                permiso.setAgente(CursorUtils.getString(c, Contract.AgentesUbicacion.COLUMN_NOMBRES));
                permiso.setJornada(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_JORNADA));
                GeneralValue tipo = GeneralValue.getGeneralValue(db, Contants.GENERAL_TABLE_MOTIVO_PERMISO, permiso.getTipo());
                if(tipo != null)
                    permiso.setTipoDescripcion(tipo.getValue());
                else
                    permiso.setTipoDescripcion("Sin Justificar");
                permisos.add(permiso);
            }while(c.moveToNext());
        }
        c.close();
        return permisos;

    }


    public static List<Justificacion> getPermisosPendientesAprobarUpload(DataBase db) {
        Cursor c = db.query(Contract.Justificaciones.TABLE_NAME, new String[]{Contract.Justificaciones._ID, Contract.Justificaciones.COLUMN_FECHA, Contract.Justificaciones.COLUMN_ID_PERMISO,
                        Contract.Justificaciones.COLUMN_TIPO, Contract.Justificaciones.COLUMN_OBSERVACION, Contract.Justificaciones.COLUMN_AUSENCIA, Contract.Justificaciones.COLUMN_ESTADO, Contract.Justificaciones.COLUMN_OBSERVACION_SUPERVISOR,
                        Contract.Justificaciones.COLUMN_PENDIENTE, Contract.Justificaciones.COLUMN_PROPIA, Contract.Justificaciones.COLUMN_ID_AGENTE, Contract.Justificaciones.COLUMN_JORNADA}, Contract.Justificaciones.COLUMN_PROPIA + " = ? AND "
                        + Contract.Justificaciones.COLUMN_PENDIENTE + " = ?",
                new String[]{ 0 + "" , 1 + ""});
        List<Justificacion> permisos = new ArrayList<Justificacion>();

        if (c.moveToFirst()) {
            Justificacion permiso = new Justificacion();
            permiso.setID(CursorUtils.getLong(c, Contract.Justificaciones._ID));
            permiso.setIdPermiso(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_PERMISO));
            permiso.setIdAgente(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_AGENTE));
            permiso.setAusencia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_AUSENCIA));
            permiso.setTipo(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_TIPO));
            permiso.setFecha(CursorUtils.getDate(c, Contract.Justificaciones.COLUMN_FECHA));
            permiso.setObservacion(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION));
            permiso.setEstado(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_ESTADO));
            permiso.setPendiente(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PENDIENTE));
            permiso.setPropia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PROPIA));
            permiso.setObservacionSupervisor(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION_SUPERVISOR));
            permiso.setJornada(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_JORNADA));
            permisos.add(permiso);
        }
        c.close();
        return permisos;

    }

    public static Justificacion getPermisoById(DataBase db, long id) {
        String query = QueryDir.getQuery(Contract.Justificaciones.QUERY_PERMISO_POR_AGENTE);

        Cursor c = db.rawQuery(query, new String[]{id+""});
        Justificacion permiso = new Justificacion();

        if (c.moveToFirst()) {

            permiso.setID(CursorUtils.getLong(c, Contract.Justificaciones._ID));
            permiso.setIdPermiso(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_PERMISO));
            permiso.setIdAgente(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_AGENTE));
            permiso.setAusencia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_AUSENCIA));
            permiso.setTipo(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_TIPO));
            permiso.setFecha(CursorUtils.getDate(c, Contract.Justificaciones.COLUMN_FECHA));
            permiso.setObservacion(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION));
            permiso.setEstado(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_ESTADO));
            permiso.setPendiente(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PENDIENTE));
            permiso.setPropia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PROPIA));
            permiso.setObservacionSupervisor(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION_SUPERVISOR));
            GeneralValue tipo = GeneralValue.getGeneralValue(db, Contants.GENERAL_TABLE_MOTIVO_PERMISO, permiso.getTipo());
            if(tipo != null)
                permiso.setTipoDescripcion(tipo.getValue());
            else
                permiso.setTipoDescripcion("Sin Justificar");
            permiso.setAgente(CursorUtils.getString(c, Contract.AgentesUbicacion.COLUMN_NOMBRES));
            permiso.setJornada(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_JORNADA));
        }
        c.close();
        return permiso;
    }
}

