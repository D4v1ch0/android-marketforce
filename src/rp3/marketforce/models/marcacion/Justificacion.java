package rp3.marketforce.models.marcacion;

import android.database.Cursor;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import rp3.data.entity.EntityBase;
import rp3.db.sqlite.DataBase;
import rp3.marketforce.db.Contract;
import rp3.util.CursorUtils;

/**
 * Created by magno_000 on 17/06/2015.
 */
public class Justificacion extends EntityBase<Justificacion>
{
    private long id;
    private Date fecha;
    private String tipo;
    private String observacion;
    private int idPermiso;
    private int idAgente;
    private boolean ausencia;
    private boolean aprobado;
    private boolean pendiente;
    private boolean propia;

    @Override
    public long getID() {
        // TODO Auto-generated method stub
        return id;
    }

    @Override
    public void setID(long id) {
        this.id = id;

    }

    public Date getFecha() {
        return fecha;
    }

    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public String getObservacion() {
        return observacion;
    }

    public void setObservacion(String observacion) {
        this.observacion = observacion;
    }

    public int getIdPermiso() {
        return idPermiso;
    }

    public void setIdPermiso(int idPermiso) {
        this.idPermiso = idPermiso;
    }

    public boolean isAusencia() {
        return ausencia;
    }

    public void setAusencia(boolean ausencia) {
        this.ausencia = ausencia;
    }

    public boolean isAprobado() {
        return aprobado;
    }

    public void setAprobado(boolean aprobado) {
        this.aprobado = aprobado;
    }

    public boolean isPendiente() {
        return pendiente;
    }

    public void setPendiente(boolean pendiente) {
        this.pendiente = pendiente;
    }

    public boolean isPropia() {
        return propia;
    }

    public void setPropia(boolean propia) {
        this.propia = propia;
    }

    public int getIdAgente() {
        return idAgente;
    }

    public void setIdAgente(int idAgente) {
        this.idAgente = idAgente;
    }

    @Override
    public boolean isAutoGeneratedId() {
        // TODO Auto-generated method stub
        return true;
    }

    @Override
    public String getTableName() {
        // TODO Auto-generated method stub
        return Contract.Justificaciones.TABLE_NAME;
    }

    @Override
    public void setValues() {
        setValue(Contract.Justificaciones.COLUMN_OBSERVACION, this.observacion);
        setValue(Contract.Justificaciones.COLUMN_FECHA, this.fecha);
        setValue(Contract.Justificaciones.COLUMN_AUSENCIA, this.ausencia);
        setValue(Contract.Justificaciones.COLUMN_TIPO, this.tipo);
        setValue(Contract.Justificaciones.COLUMN_ID_PERMISO, this.idPermiso);
        setValue(Contract.Justificaciones.COLUMN_APROBADO, this.aprobado);
        setValue(Contract.Justificaciones.COLUMN_PENDIENTE, this.pendiente);
        setValue(Contract.Justificaciones.COLUMN_PROPIA, this.propia);
        setValue(Contract.Justificaciones.COLUMN_ID_AGENTE, this.idAgente);
    }

    @Override
    public Object getValue(String key) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String getDescription() {
        // TODO Auto-generated method stub
        return null;
    }

    public static List<Justificacion> getPermisosPendientesPropias(DataBase db) {
        Cursor c = db.query(Contract.Justificaciones.TABLE_NAME, new String[]{Contract.Justificaciones._ID, Contract.Justificaciones.COLUMN_FECHA, Contract.Justificaciones.COLUMN_ID_PERMISO,
                        Contract.Justificaciones.COLUMN_TIPO, Contract.Justificaciones.COLUMN_OBSERVACION, Contract.Justificaciones.COLUMN_AUSENCIA, Contract.Justificaciones.COLUMN_APROBADO,
                        Contract.Justificaciones.COLUMN_PENDIENTE, Contract.Justificaciones.COLUMN_PROPIA}, Contract.Justificaciones.COLUMN_PENDIENTE + " = ? AND " + Contract.Justificaciones.COLUMN_PROPIA + " = ?",
                new String[]{1 + "", 1 + ""});
        List<Justificacion> permisos = new ArrayList<Justificacion>();

        if (c.moveToFirst()) {
            Justificacion permiso = new Justificacion();
            permiso.setID(CursorUtils.getLong(c, Contract.Justificaciones._ID));
            permiso.setIdPermiso(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_PERMISO));
            permiso.setAusencia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_AUSENCIA));
            permiso.setTipo(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_TIPO));
            permiso.setFecha(CursorUtils.getDate(c, Contract.Justificaciones.COLUMN_FECHA));
            permiso.setObservacion(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION));
            permiso.setAprobado(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_APROBADO));
            permiso.setPendiente(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PENDIENTE));
            permiso.setPropia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PROPIA));
            permisos.add(permiso);
        }

        return permisos;

    }

    public static List<Justificacion> getPermisosPendientesAprobar(DataBase db) {
        Cursor c = db.query(Contract.Justificaciones.TABLE_NAME, new String[]{Contract.Justificaciones._ID, Contract.Justificaciones.COLUMN_FECHA, Contract.Justificaciones.COLUMN_ID_PERMISO,
                        Contract.Justificaciones.COLUMN_TIPO, Contract.Justificaciones.COLUMN_OBSERVACION, Contract.Justificaciones.COLUMN_AUSENCIA, Contract.Justificaciones.COLUMN_APROBADO,
                        Contract.Justificaciones.COLUMN_PENDIENTE, Contract.Justificaciones.COLUMN_PROPIA, Contract.Justificaciones.COLUMN_ID_AGENTE}, Contract.Justificaciones.COLUMN_APROBADO + " = ? AND " + Contract.Justificaciones.COLUMN_PROPIA + " = ?",
                new String[]{0 + "", 0 + ""});
        List<Justificacion> permisos = new ArrayList<Justificacion>();

        if (c.moveToFirst()) {
            Justificacion permiso = new Justificacion();
            permiso.setID(CursorUtils.getLong(c, Contract.Justificaciones._ID));
            permiso.setIdPermiso(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_PERMISO));
            permiso.setIdAgente(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_AGENTE));
            permiso.setAusencia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_AUSENCIA));
            permiso.setTipo(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_TIPO));
            permiso.setFecha(CursorUtils.getDate(c, Contract.Justificaciones.COLUMN_FECHA));
            permiso.setObservacion(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION));
            permiso.setAprobado(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_APROBADO));
            permiso.setPendiente(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PENDIENTE));
            permiso.setPropia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PROPIA));
            permisos.add(permiso);
        }

        return permisos;

    }


    public static List<Justificacion> getPermisosPendientesAprobarUpload(DataBase db) {
        Cursor c = db.query(Contract.Justificaciones.TABLE_NAME, new String[]{Contract.Justificaciones._ID, Contract.Justificaciones.COLUMN_FECHA, Contract.Justificaciones.COLUMN_ID_PERMISO,
                        Contract.Justificaciones.COLUMN_TIPO, Contract.Justificaciones.COLUMN_OBSERVACION, Contract.Justificaciones.COLUMN_AUSENCIA, Contract.Justificaciones.COLUMN_APROBADO,
                        Contract.Justificaciones.COLUMN_PENDIENTE, Contract.Justificaciones.COLUMN_PROPIA, Contract.Justificaciones.COLUMN_ID_AGENTE}, Contract.Justificaciones.COLUMN_APROBADO + " = ? AND " + Contract.Justificaciones.COLUMN_PROPIA + " = ? AND "
                        + Contract.Justificaciones.COLUMN_PENDIENTE + " = ?",
                new String[]{1 + "", 0 + "" , 1 + ""});
        List<Justificacion> permisos = new ArrayList<Justificacion>();

        if (c.moveToFirst()) {
            Justificacion permiso = new Justificacion();
            permiso.setID(CursorUtils.getLong(c, Contract.Justificaciones._ID));
            permiso.setIdPermiso(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_PERMISO));
            permiso.setIdAgente(CursorUtils.getInt(c, Contract.Justificaciones.COLUMN_ID_AGENTE));
            permiso.setAusencia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_AUSENCIA));
            permiso.setTipo(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_TIPO));
            permiso.setFecha(CursorUtils.getDate(c, Contract.Justificaciones.COLUMN_FECHA));
            permiso.setObservacion(CursorUtils.getString(c, Contract.Justificaciones.COLUMN_OBSERVACION));
            permiso.setAprobado(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_APROBADO));
            permiso.setPendiente(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PENDIENTE));
            permiso.setPropia(CursorUtils.getBoolean(c, Contract.Justificaciones.COLUMN_PROPIA));
            permisos.add(permiso);
        }

        return permisos;

    }
}

