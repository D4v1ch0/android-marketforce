package rp3.marketforce.models;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import android.database.Cursor;
import rp3.db.sqlite.DataBase;
import rp3.marketforce.db.Contract;
import rp3.util.Convert;
import rp3.util.CursorUtils;

public class Ubicacion extends rp3.data.entity.EntityBase<Ubicacion> {

	private long id;
	private double latitud;
	private double longitud;
	private long fecha;
	private boolean pendiente;
	
	@Override
	public long getID() {
		// TODO Auto-generated method stub
		return this.id;
	}

	@Override
	public void setID(long id) {
		this.id = id;
		
	}

	@Override
	public boolean isAutoGeneratedId() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public String getTableName() {
		// TODO Auto-generated method stub
		return Contract.Ubicacion.TABLE_NAME;
	}

	@Override
	public void setValues() {
		setValue(Contract.Ubicacion.COLUMN_LATITUD, this.latitud);
		setValue(Contract.Ubicacion.COLUMN_LONGITUD, this.longitud);
		setValue(Contract.Ubicacion.COLUMN_FECHA, this.fecha);
		setValue(Contract.Ubicacion.COLUMN_PENDIENTE, this.pendiente);
		
	}

	@Override
	public Object getValue(String key) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getDescription() {
		// TODO Auto-generated method stub
		return null;
	}

	public double getLatitud() {
		return latitud;
	}

	public void setLatitud(double latitud) {
		this.latitud = latitud;
	}

	public double getLongitud() {
		return longitud;
	}

	public void setLongitud(double longitud) {
		this.longitud = longitud;
	}

	public long getFecha() {
		return fecha;
	}

	public void setFecha(long fecha) {
		this.fecha = fecha;
	}
	
	public boolean isPendiente() {
		return pendiente;
	}

	public void setPendiente(boolean pendiente) {
		this.pendiente = pendiente;
	}

	public static List<Ubicacion> getUbicaciones(DataBase db)
	{
		Cursor c = db.query(Contract.Ubicacion.TABLE_NAME, new String[] { Contract.Ubicacion._ID, Contract.Ubicacion.COLUMN_LATITUD,
										Contract.Ubicacion.COLUMN_LONGITUD, Contract.Ubicacion.COLUMN_FECHA},
										Contract.Ubicacion.COLUMN_PENDIENTE + " = 1",new String []{}, null, null, Contract.Ubicacion.COLUMN_FECHA + " ASC ");

		List<Ubicacion> ubicaciones = new ArrayList<Ubicacion>();
		
		if(c.moveToFirst())
		{
			do
			{
				Ubicacion ub = new Ubicacion();
				ub.setID(CursorUtils.getLong(c, Contract.Ubicacion._ID));
				ub.setLatitud(CursorUtils.getDouble(c, Contract.Ubicacion.COLUMN_LATITUD));
				ub.setLongitud(CursorUtils.getDouble(c, Contract.Ubicacion.COLUMN_LONGITUD));
				ub.setFecha(CursorUtils.getLong(c, Contract.Ubicacion.COLUMN_FECHA));
				ubicaciones.add(ub);
			}while(c.moveToNext());
		}
        c.close();
		return ubicaciones;
	}
	
	public static List<Ubicacion> getRecorrido(DataBase db, Calendar cal)
	{
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		long inicio = Convert.getTicksFromDate(cal.getTime());
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		long fin = Convert.getTicksFromDate(cal.getTime());
		
		Cursor c = db.query(Contract.Ubicacion.TABLE_NAME, new String[] { Contract.Ubicacion._ID, Contract.Ubicacion.COLUMN_LATITUD,
										Contract.Ubicacion.COLUMN_LONGITUD, Contract.Ubicacion.COLUMN_FECHA},
										Contract.Ubicacion.COLUMN_FECHA + " >= ? AND " +
										Contract.Ubicacion.COLUMN_FECHA + " <= ? ", new String[] {inicio + "", fin + ""}, null, null, Contract.Ubicacion.COLUMN_FECHA + " ASC ");
		List<Ubicacion> ubicaciones = new ArrayList<Ubicacion>();
		
		if(c.moveToFirst())
		{
			do
			{
				Ubicacion ub = new Ubicacion();
				ub.setID(CursorUtils.getLong(c, Contract.Ubicacion._ID));
				ub.setLatitud(CursorUtils.getFloat(c, Contract.Ubicacion.COLUMN_LATITUD));
				ub.setLongitud(CursorUtils.getFloat(c, Contract.Ubicacion.COLUMN_LONGITUD));
				ub.setFecha(CursorUtils.getLong(c, Contract.Ubicacion.COLUMN_FECHA));
				ubicaciones.add(ub);
			}while(c.moveToNext());
		}
        c.close();
		return ubicaciones;
	}

}
