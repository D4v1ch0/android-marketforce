package rp3.marketforce.models.oportunidad;

import android.database.Cursor;
import android.util.Log;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import rp3.data.entity.EntityBase;
import rp3.db.QueryDir;
import rp3.db.sqlite.DataBase;
import rp3.marketforce.Contants;
import rp3.marketforce.db.Contract;
import rp3.util.CursorUtils;


/**
 * Created by magno_000 on 13/03/2017.
 */
public class AgendaOportunidad extends EntityBase<AgendaOportunidad> {

    private long id;
    private int idOportunidad;
    private int _idOportunidad;
    private int idAgenda;
    private double latitud;
    private double longitud;
    private String estado;
    private Date fechaInicio;
    private Date fechaFin;
    private boolean pendiente;

    private String descripcion;
    private String direccion;
    private String email;

    private String estadoAgenda;
    private List<OportunidadEtapa> oportunidadEtapas;
    private List<OportunidadBitacora> oportunidadBitacoras;
    private Oportunidad oportunidad;

    @Override
    public long getID() {
        return id;
    }

    @Override
    public void setID(long id) {
        this.id = id;
    }

    public int getIdOportunidad() {
        return idOportunidad;
    }

    public void setIdOportunidad(int idOportunidad) {
        this.idOportunidad = idOportunidad;
    }

    public int getIdAgenda() {
        return idAgenda;
    }

    public void setIdAgenda(int idAgenda) {
        this.idAgenda = idAgenda;
    }

    public double getLatitud() {
        return latitud;
    }

    public void setLatitud(double latitud) {
        this.latitud = latitud;
    }

    public double getLongitud() {
        return longitud;
    }

    public void setLongitud(double longitud) {
        this.longitud = longitud;
    }

    public String getEstado() {
        return estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }

    public Date getFechaInicio() {
        return fechaInicio;
    }

    public void setFechaInicio(Date fechaInicio) {
        this.fechaInicio = fechaInicio;
    }

    public Date getFechaFin() {
        return fechaFin;
    }

    public void setFechaFin(Date fechaFin) {
        this.fechaFin = fechaFin;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public String getDireccion() {
        return direccion;
    }

    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public int get_idOportunidad() {
        return _idOportunidad;
    }

    public void set_idOportunidad(int _idOportunidad) {
        this._idOportunidad = _idOportunidad;
    }

    public List<OportunidadBitacora> getOportunidadBitacoras() {
        return oportunidadBitacoras;
    }

    public void setOportunidadBitacoras(List<OportunidadBitacora> oportunidadBitacoras) {
        this.oportunidadBitacoras = oportunidadBitacoras;
    }

    public List<OportunidadEtapa> getOportunidadEtapas() {
        return oportunidadEtapas;
    }

    public void setOportunidadEtapas(List<OportunidadEtapa> oportunidadEtapas) {
        this.oportunidadEtapas = oportunidadEtapas;
    }

    public Oportunidad getOportunidad() {
        return oportunidad;
    }

    public String getEstadoAgenda() {
        return estadoAgenda;
    }

    public void setEstadoAgenda(String estadoAgenda) {
        this.estadoAgenda = estadoAgenda;
    }

    public void setOportunidad(Oportunidad oportunidad) {
        this.oportunidad = oportunidad;
    }

    public boolean isPendiente() {
        return pendiente;
    }

    public void setPendiente(boolean pendiente) {
        this.pendiente = pendiente;
    }

    @Override
    public boolean isAutoGeneratedId() {
        return true;
    }

    @Override
    public String getTableName() {
        return Contract.AgendaOportunidad.TABLE_NAME;
    }

    @Override
    public void setValues() {
        setValue(Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD, this.idOportunidad);
        setValue(Contract.AgendaOportunidad.COLUMN_ESTADO, this.estado);
        setValue(Contract.AgendaOportunidad.COLUMN_FECHA_INICIO, this.fechaInicio);
        setValue(Contract.AgendaOportunidad.COLUMN_FECHA_FIN, this.fechaFin);
        setValue(Contract.AgendaOportunidad.COLUMN_ID_AGENDA, this.idAgenda);
        setValue(Contract.AgendaOportunidad.COLUMN_LATITUD, this.latitud);
        setValue(Contract.AgendaOportunidad.COLUMN_LONGITUD, this.longitud);
        setValue(Contract.AgendaOportunidad.COLUMN_PENDIENTE, this.pendiente);
        setValue(Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD_INT, this._idOportunidad);
    }

    @Override
    public Object getValue(String key) {
        return null;
    }

    @Override
    public String getDescription() {
        return null;
    }

    public static AgendaOportunidad getAgendaOportunidadGestionado(DataBase db){

        Cursor c = db.query(Contract.AgendaOportunidad.TABLE_NAME, new String[] {Contract.AgendaOportunidad._ID, Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD, Contract.AgendaOportunidad.COLUMN_ID_AGENDA, Contract.AgendaOportunidad.COLUMN_FECHA_INICIO,
                        Contract.AgendaOportunidad.COLUMN_ESTADO, Contract.AgendaOportunidad.COLUMN_FECHA_FIN, Contract.AgendaOportunidad.COLUMN_LATITUD, Contract.AgendaOportunidad.COLUMN_LONGITUD, Contract.AgendaOportunidad.COLUMN_PENDIENTE,
                        Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD_INT}, Contract.AgendaOportunidad.COLUMN_ESTADO + " = ?", new String[] {Contants.ESTADO_GESTIONANDO + ""});

        AgendaOportunidad agendaOportunidad = new AgendaOportunidad();
        while(c.moveToNext()){

            agendaOportunidad.setID(CursorUtils.getInt(c, Contract.AgendaOportunidad._ID));
            agendaOportunidad.setIdOportunidad(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD));
            agendaOportunidad.setIdAgenda(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_AGENDA));
            agendaOportunidad.setEstado(CursorUtils.getString(c, Contract.AgendaOportunidad.COLUMN_ESTADO));
            agendaOportunidad.setFechaInicio(CursorUtils.getDate(c, Contract.AgendaOportunidad.COLUMN_FECHA_INICIO));
            agendaOportunidad.setFechaFin(CursorUtils.getDate(c, Contract.AgendaOportunidad.COLUMN_FECHA_FIN));
            agendaOportunidad.setLongitud(CursorUtils.getDouble(c, Contract.AgendaOportunidad.COLUMN_LONGITUD));
            agendaOportunidad.setLatitud(CursorUtils.getDouble(c, Contract.AgendaOportunidad.COLUMN_LATITUD));
            agendaOportunidad.setPendiente(CursorUtils.getBoolean(c, Contract.AgendaOportunidad.COLUMN_PENDIENTE));
            agendaOportunidad.set_idOportunidad(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD_INT));
        }
        c.close();
        return agendaOportunidad;
    }

    public static AgendaOportunidad getAgendaById(DataBase db, long id){

        String query = QueryDir.getQuery(Contract.AgendaOportunidad.QUERY_GET_BY_ID);
        Cursor c = db.rawQuery(query, "" + id);

        AgendaOportunidad agendaOportunidad = new AgendaOportunidad();
        while(c.moveToNext()){

            agendaOportunidad.setID(CursorUtils.getInt(c, Contract.AgendaOportunidad._ID));
            agendaOportunidad.setIdOportunidad(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD));
            agendaOportunidad.setIdAgenda(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_AGENDA));
            agendaOportunidad.setEstado(CursorUtils.getString(c, Contract.AgendaOportunidad.COLUMN_ESTADO));
            agendaOportunidad.setFechaInicio(CursorUtils.getDate(c, Contract.AgendaOportunidad.COLUMN_FECHA_INICIO));
            agendaOportunidad.setFechaFin(CursorUtils.getDate(c, Contract.AgendaOportunidad.COLUMN_FECHA_FIN));
            agendaOportunidad.setLongitud(CursorUtils.getDouble(c, Contract.AgendaOportunidad.COLUMN_LONGITUD));
            agendaOportunidad.setLatitud(CursorUtils.getDouble(c, Contract.AgendaOportunidad.COLUMN_LATITUD));
            agendaOportunidad.setPendiente(CursorUtils.getBoolean(c, Contract.AgendaOportunidad.COLUMN_PENDIENTE));
            agendaOportunidad.set_idOportunidad(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD_INT));
            agendaOportunidad.setDescripcion(CursorUtils.getString(c, Contract.AgendaOportunidad.FIELD_DESCRIPCION));
            agendaOportunidad.setDireccion(CursorUtils.getString(c, Contract.AgendaOportunidad.FIELD_DIRECCION));
            agendaOportunidad.setEmail(CursorUtils.getString(c, Contract.AgendaOportunidad.FIELD_CORREO));
            agendaOportunidad.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));

            agendaOportunidad.setOportunidad(Oportunidad.getOportunidadId(db, agendaOportunidad.get_idOportunidad()));
            agendaOportunidad.setOportunidadEtapas(OportunidadEtapa.getEtapasOportunidadByAgenda(db, agendaOportunidad.getID()));
            agendaOportunidad.setOportunidadBitacoras(OportunidadBitacora.getBitacoraOportunidadByAgenda(db, agendaOportunidad.getID()));
        }
        c.close();
        return agendaOportunidad;
    }

    public static List<AgendaOportunidad> getAgendaOportunidadPendientes(DataBase db){

        String query = QueryDir.getQuery(Contract.AgendaOportunidad.QUERY_GET_PENDIENTES);
        Cursor c = db.rawQuery(query);

        List<AgendaOportunidad> list = new ArrayList<AgendaOportunidad>();
        while(c.moveToNext()){
            AgendaOportunidad agendaOportunidad = new AgendaOportunidad();
            agendaOportunidad.setID(CursorUtils.getInt(c, Contract.AgendaOportunidad._ID));
            agendaOportunidad.setIdOportunidad(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD));
            agendaOportunidad.setIdAgenda(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_AGENDA));
            agendaOportunidad.setEstado(CursorUtils.getString(c, Contract.AgendaOportunidad.COLUMN_ESTADO));
            agendaOportunidad.setFechaInicio(CursorUtils.getDate(c, Contract.AgendaOportunidad.COLUMN_FECHA_INICIO));
            agendaOportunidad.setFechaFin(CursorUtils.getDate(c, Contract.AgendaOportunidad.COLUMN_FECHA_FIN));
            agendaOportunidad.setLongitud(CursorUtils.getDouble(c, Contract.AgendaOportunidad.COLUMN_LONGITUD));
            agendaOportunidad.setLatitud(CursorUtils.getDouble(c, Contract.AgendaOportunidad.COLUMN_LATITUD));
            agendaOportunidad.setPendiente(CursorUtils.getBoolean(c, Contract.AgendaOportunidad.COLUMN_PENDIENTE));
            agendaOportunidad.set_idOportunidad(CursorUtils.getInt(c, Contract.AgendaOportunidad.COLUMN_ID_OPORTUNIDAD_INT));
            agendaOportunidad.setDescripcion(CursorUtils.getString(c, Contract.AgendaOportunidad.FIELD_DESCRIPCION));
            agendaOportunidad.setDireccion(CursorUtils.getString(c, Contract.AgendaOportunidad.FIELD_DIRECCION));
            agendaOportunidad.setEmail(CursorUtils.getString(c, Contract.AgendaOportunidad.FIELD_CORREO));
            agendaOportunidad.setEstadoAgenda(CursorUtils.getString(c, Contract.Agenda.FIELD_ESTADO_AGENDA_DESCRIPCION));

            agendaOportunidad.setOportunidad(Oportunidad.getOportunidadId(db, agendaOportunidad.get_idOportunidad()));
            agendaOportunidad.setOportunidadEtapas(OportunidadEtapa.getEtapasOportunidadByAgenda(db, agendaOportunidad.getID()));
            agendaOportunidad.setOportunidadBitacoras(OportunidadBitacora.getBitacoraOportunidadByAgenda(db, agendaOportunidad.getID()));
            list.add(agendaOportunidad);
        }
        c.close();
        return list;
    }

    protected boolean insertDb(DataBase db) {
        boolean result = false;

        try {
            result = super.insertDb(db);
            if (this.id == 0) {
                this.id = db.queryMaxLong(Contract.AgendaOportunidad.TABLE_NAME, Contract.AgendaOportunidad._ID);
            }

            if (result) {
                if (result) {
                    AgendaOportunidadExt cl_ex = new AgendaOportunidadExt();
                    result = AgendaOportunidadExt.insert(db, cl_ex);
                }
            }

        } catch (Exception ex) {
            result = false;
            Log.e("Oportunidad Insert", ex.getMessage());
        } finally {
        }
        return result;
    }

    protected boolean updateDb(DataBase db) {
        boolean result = super.updateDb(db);

        if (result) {
            AgendaOportunidadExt cl_ex = new AgendaOportunidadExt();
            result = AgendaOportunidadExt.update(db, cl_ex);
        }
        return result;
    }

    public class AgendaOportunidadExt extends EntityBase<AgendaOportunidadExt> {

        @Override
        public long getID() {
            return id;
        }

        @Override
        public void setID(long idext) {
            id = idext;
        }

        @Override
        public boolean isAutoGeneratedId() {
            return false;
        }

        @Override
        public String getTableName() {
            return Contract.AgendaOportunidadExt.TABLE_NAME;
        }

        @Override
        public void setValues() {
            if (getAction() == ACTION_INSERT) {
                setValue(Contract.AgendaOportunidadExt.COLUMN_ID, id);
            }
            setValue(Contract.AgendaOportunidadExt.COLUMN_DESCRIPCION, descripcion);
            setValue(Contract.AgendaOportunidadExt.COLUMN_DIRECCION, direccion);
            setValue(Contract.AgendaOportunidadExt.COLUMN_CORREO, email);
        }

        @Override
        public Object getValue(String key) {
            return null;
        }

        @Override
        public String getDescription() {
            return null;
        }

        @Override
        public String getWhere() {
            return Contract.AgendaOportunidadExt.COLUMN_ID + " = ?";
        }
    }
}